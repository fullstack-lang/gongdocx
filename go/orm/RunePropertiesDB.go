// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdocx/go/db"
	"github.com/fullstack-lang/gongdocx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_RuneProperties_sql sql.NullBool
var dummy_RuneProperties_time time.Duration
var dummy_RuneProperties_sort sort.Float64Slice

// RunePropertiesAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model runepropertiesAPI
type RunePropertiesAPI struct {
	gorm.Model

	models.RuneProperties_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	RunePropertiesPointersEncoding RunePropertiesPointersEncoding
}

// RunePropertiesPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RunePropertiesPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Node is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NodeID sql.NullInt64
}

// RunePropertiesDB describes a runeproperties in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model runepropertiesDB
type RunePropertiesDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field runepropertiesDB.Name
	Name_Data sql.NullString

	// Declation for basic field runepropertiesDB.IsBold
	// provide the sql storage for the boolan
	IsBold_Data sql.NullBool

	// Declation for basic field runepropertiesDB.IsStrike
	// provide the sql storage for the boolan
	IsStrike_Data sql.NullBool

	// Declation for basic field runepropertiesDB.IsItalic
	// provide the sql storage for the boolan
	IsItalic_Data sql.NullBool

	// Declation for basic field runepropertiesDB.Content
	Content_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	RunePropertiesPointersEncoding
}

// RunePropertiesDBs arrays runepropertiesDBs
// swagger:response runepropertiesDBsResponse
type RunePropertiesDBs []RunePropertiesDB

// RunePropertiesDBResponse provides response
// swagger:response runepropertiesDBResponse
type RunePropertiesDBResponse struct {
	RunePropertiesDB
}

// RunePropertiesWOP is a RuneProperties without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RunePropertiesWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsBold bool `xlsx:"2"`

	IsStrike bool `xlsx:"3"`

	IsItalic bool `xlsx:"4"`

	Content string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var RuneProperties_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsBold",
	"IsStrike",
	"IsItalic",
	"Content",
}

type BackRepoRunePropertiesStruct struct {
	// stores RunePropertiesDB according to their gorm ID
	Map_RunePropertiesDBID_RunePropertiesDB map[uint]*RunePropertiesDB

	// stores RunePropertiesDB ID according to RuneProperties address
	Map_RunePropertiesPtr_RunePropertiesDBID map[*models.RuneProperties]uint

	// stores RuneProperties according to their gorm ID
	Map_RunePropertiesDBID_RunePropertiesPtr map[uint]*models.RuneProperties

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoRuneProperties *BackRepoRunePropertiesStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRuneProperties.stage
	return
}

func (backRepoRuneProperties *BackRepoRunePropertiesStruct) GetDB() db.DBInterface {
	return backRepoRuneProperties.db
}

// GetRunePropertiesDBFromRunePropertiesPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) GetRunePropertiesDBFromRunePropertiesPtr(runeproperties *models.RuneProperties) (runepropertiesDB *RunePropertiesDB) {
	id := backRepoRuneProperties.Map_RunePropertiesPtr_RunePropertiesDBID[runeproperties]
	runepropertiesDB = backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB[id]
	return
}

// BackRepoRuneProperties.CommitPhaseOne commits all staged instances of RuneProperties to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for runeproperties := range stage.RunePropertiess {
		backRepoRuneProperties.CommitPhaseOneInstance(runeproperties)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, runeproperties := range backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr {
		if _, ok := stage.RunePropertiess[runeproperties]; !ok {
			backRepoRuneProperties.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRuneProperties.CommitDeleteInstance commits deletion of RuneProperties to the BackRepo
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) CommitDeleteInstance(id uint) (Error error) {

	runeproperties := backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr[id]

	// runeproperties is not staged anymore, remove runepropertiesDB
	runepropertiesDB := backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB[id]
	db, _ := backRepoRuneProperties.db.Unscoped()
	_, err := db.Delete(runepropertiesDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoRuneProperties.Map_RunePropertiesPtr_RunePropertiesDBID, runeproperties)
	delete(backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr, id)
	delete(backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB, id)

	return
}

// BackRepoRuneProperties.CommitPhaseOneInstance commits runeproperties staged instances of RuneProperties to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) CommitPhaseOneInstance(runeproperties *models.RuneProperties) (Error error) {

	// check if the runeproperties is not commited yet
	if _, ok := backRepoRuneProperties.Map_RunePropertiesPtr_RunePropertiesDBID[runeproperties]; ok {
		return
	}

	// initiate runeproperties
	var runepropertiesDB RunePropertiesDB
	runepropertiesDB.CopyBasicFieldsFromRuneProperties(runeproperties)

	_, err := backRepoRuneProperties.db.Create(&runepropertiesDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoRuneProperties.Map_RunePropertiesPtr_RunePropertiesDBID[runeproperties] = runepropertiesDB.ID
	backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr[runepropertiesDB.ID] = runeproperties
	backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB[runepropertiesDB.ID] = &runepropertiesDB

	return
}

// BackRepoRuneProperties.CommitPhaseTwo commits all staged instances of RuneProperties to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, runeproperties := range backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr {
		backRepoRuneProperties.CommitPhaseTwoInstance(backRepo, idx, runeproperties)
	}

	return
}

// BackRepoRuneProperties.CommitPhaseTwoInstance commits {{structname }} of models.RuneProperties to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, runeproperties *models.RuneProperties) (Error error) {

	// fetch matching runepropertiesDB
	if runepropertiesDB, ok := backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB[idx]; ok {

		runepropertiesDB.CopyBasicFieldsFromRuneProperties(runeproperties)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value runeproperties.Node translates to updating the runeproperties.NodeID
		runepropertiesDB.NodeID.Valid = true // allow for a 0 value (nil association)
		if runeproperties.Node != nil {
			if NodeId, ok := backRepo.BackRepoNode.Map_NodePtr_NodeDBID[runeproperties.Node]; ok {
				runepropertiesDB.NodeID.Int64 = int64(NodeId)
				runepropertiesDB.NodeID.Valid = true
			}
		} else {
			runepropertiesDB.NodeID.Int64 = 0
			runepropertiesDB.NodeID.Valid = true
		}

		_, err := backRepoRuneProperties.db.Save(runepropertiesDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown RuneProperties intance %s", runeproperties.Name))
		return err
	}

	return
}

// BackRepoRuneProperties.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) CheckoutPhaseOne() (Error error) {

	runepropertiesDBArray := make([]RunePropertiesDB, 0)
	_, err := backRepoRuneProperties.db.Find(&runepropertiesDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	runepropertiesInstancesToBeRemovedFromTheStage := make(map[*models.RuneProperties]any)
	for key, value := range backRepoRuneProperties.stage.RunePropertiess {
		runepropertiesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, runepropertiesDB := range runepropertiesDBArray {
		backRepoRuneProperties.CheckoutPhaseOneInstance(&runepropertiesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		runeproperties, ok := backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr[runepropertiesDB.ID]
		if ok {
			delete(runepropertiesInstancesToBeRemovedFromTheStage, runeproperties)
		}
	}

	// remove from stage and back repo's 3 maps all runepropertiess that are not in the checkout
	for runeproperties := range runepropertiesInstancesToBeRemovedFromTheStage {
		runeproperties.Unstage(backRepoRuneProperties.GetStage())

		// remove instance from the back repo 3 maps
		runepropertiesID := backRepoRuneProperties.Map_RunePropertiesPtr_RunePropertiesDBID[runeproperties]
		delete(backRepoRuneProperties.Map_RunePropertiesPtr_RunePropertiesDBID, runeproperties)
		delete(backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB, runepropertiesID)
		delete(backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr, runepropertiesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a runepropertiesDB that has been found in the DB, updates the backRepo and stages the
// models version of the runepropertiesDB
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) CheckoutPhaseOneInstance(runepropertiesDB *RunePropertiesDB) (Error error) {

	runeproperties, ok := backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr[runepropertiesDB.ID]
	if !ok {
		runeproperties = new(models.RuneProperties)

		backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr[runepropertiesDB.ID] = runeproperties
		backRepoRuneProperties.Map_RunePropertiesPtr_RunePropertiesDBID[runeproperties] = runepropertiesDB.ID

		// append model store with the new element
		runeproperties.Name = runepropertiesDB.Name_Data.String
		runeproperties.Stage(backRepoRuneProperties.GetStage())
	}
	runepropertiesDB.CopyBasicFieldsToRuneProperties(runeproperties)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	runeproperties.Stage(backRepoRuneProperties.GetStage())

	// preserve pointer to runepropertiesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RunePropertiesDBID_RunePropertiesDB)[runepropertiesDB hold variable pointers
	runepropertiesDB_Data := *runepropertiesDB
	preservedPtrToRuneProperties := &runepropertiesDB_Data
	backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB[runepropertiesDB.ID] = preservedPtrToRuneProperties

	return
}

// BackRepoRuneProperties.CheckoutPhaseTwo Checkouts all staged instances of RuneProperties to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, runepropertiesDB := range backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB {
		backRepoRuneProperties.CheckoutPhaseTwoInstance(backRepo, runepropertiesDB)
	}
	return
}

// BackRepoRuneProperties.CheckoutPhaseTwoInstance Checkouts staged instances of RuneProperties to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, runepropertiesDB *RunePropertiesDB) (Error error) {

	runeproperties := backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr[runepropertiesDB.ID]

	runepropertiesDB.DecodePointers(backRepo, runeproperties)

	return
}

func (runepropertiesDB *RunePropertiesDB) DecodePointers(backRepo *BackRepoStruct, runeproperties *models.RuneProperties) {

	// insertion point for checkout of pointer encoding
	// Node field
	runeproperties.Node = nil
	if runepropertiesDB.NodeID.Int64 != 0 {
		runeproperties.Node = backRepo.BackRepoNode.Map_NodeDBID_NodePtr[uint(runepropertiesDB.NodeID.Int64)]
	}
	return
}

// CommitRuneProperties allows commit of a single runeproperties (if already staged)
func (backRepo *BackRepoStruct) CommitRuneProperties(runeproperties *models.RuneProperties) {
	backRepo.BackRepoRuneProperties.CommitPhaseOneInstance(runeproperties)
	if id, ok := backRepo.BackRepoRuneProperties.Map_RunePropertiesPtr_RunePropertiesDBID[runeproperties]; ok {
		backRepo.BackRepoRuneProperties.CommitPhaseTwoInstance(backRepo, id, runeproperties)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRuneProperties allows checkout of a single runeproperties (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRuneProperties(runeproperties *models.RuneProperties) {
	// check if the runeproperties is staged
	if _, ok := backRepo.BackRepoRuneProperties.Map_RunePropertiesPtr_RunePropertiesDBID[runeproperties]; ok {

		if id, ok := backRepo.BackRepoRuneProperties.Map_RunePropertiesPtr_RunePropertiesDBID[runeproperties]; ok {
			var runepropertiesDB RunePropertiesDB
			runepropertiesDB.ID = id

			if _, err := backRepo.BackRepoRuneProperties.db.First(&runepropertiesDB, id); err != nil {
				log.Fatalln("CheckoutRuneProperties : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRuneProperties.CheckoutPhaseOneInstance(&runepropertiesDB)
			backRepo.BackRepoRuneProperties.CheckoutPhaseTwoInstance(backRepo, &runepropertiesDB)
		}
	}
}

// CopyBasicFieldsFromRuneProperties
func (runepropertiesDB *RunePropertiesDB) CopyBasicFieldsFromRuneProperties(runeproperties *models.RuneProperties) {
	// insertion point for fields commit

	runepropertiesDB.Name_Data.String = runeproperties.Name
	runepropertiesDB.Name_Data.Valid = true

	runepropertiesDB.IsBold_Data.Bool = runeproperties.IsBold
	runepropertiesDB.IsBold_Data.Valid = true

	runepropertiesDB.IsStrike_Data.Bool = runeproperties.IsStrike
	runepropertiesDB.IsStrike_Data.Valid = true

	runepropertiesDB.IsItalic_Data.Bool = runeproperties.IsItalic
	runepropertiesDB.IsItalic_Data.Valid = true

	runepropertiesDB.Content_Data.String = runeproperties.Content
	runepropertiesDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromRuneProperties_WOP
func (runepropertiesDB *RunePropertiesDB) CopyBasicFieldsFromRuneProperties_WOP(runeproperties *models.RuneProperties_WOP) {
	// insertion point for fields commit

	runepropertiesDB.Name_Data.String = runeproperties.Name
	runepropertiesDB.Name_Data.Valid = true

	runepropertiesDB.IsBold_Data.Bool = runeproperties.IsBold
	runepropertiesDB.IsBold_Data.Valid = true

	runepropertiesDB.IsStrike_Data.Bool = runeproperties.IsStrike
	runepropertiesDB.IsStrike_Data.Valid = true

	runepropertiesDB.IsItalic_Data.Bool = runeproperties.IsItalic
	runepropertiesDB.IsItalic_Data.Valid = true

	runepropertiesDB.Content_Data.String = runeproperties.Content
	runepropertiesDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromRunePropertiesWOP
func (runepropertiesDB *RunePropertiesDB) CopyBasicFieldsFromRunePropertiesWOP(runeproperties *RunePropertiesWOP) {
	// insertion point for fields commit

	runepropertiesDB.Name_Data.String = runeproperties.Name
	runepropertiesDB.Name_Data.Valid = true

	runepropertiesDB.IsBold_Data.Bool = runeproperties.IsBold
	runepropertiesDB.IsBold_Data.Valid = true

	runepropertiesDB.IsStrike_Data.Bool = runeproperties.IsStrike
	runepropertiesDB.IsStrike_Data.Valid = true

	runepropertiesDB.IsItalic_Data.Bool = runeproperties.IsItalic
	runepropertiesDB.IsItalic_Data.Valid = true

	runepropertiesDB.Content_Data.String = runeproperties.Content
	runepropertiesDB.Content_Data.Valid = true
}

// CopyBasicFieldsToRuneProperties
func (runepropertiesDB *RunePropertiesDB) CopyBasicFieldsToRuneProperties(runeproperties *models.RuneProperties) {
	// insertion point for checkout of basic fields (back repo to stage)
	runeproperties.Name = runepropertiesDB.Name_Data.String
	runeproperties.IsBold = runepropertiesDB.IsBold_Data.Bool
	runeproperties.IsStrike = runepropertiesDB.IsStrike_Data.Bool
	runeproperties.IsItalic = runepropertiesDB.IsItalic_Data.Bool
	runeproperties.Content = runepropertiesDB.Content_Data.String
}

// CopyBasicFieldsToRuneProperties_WOP
func (runepropertiesDB *RunePropertiesDB) CopyBasicFieldsToRuneProperties_WOP(runeproperties *models.RuneProperties_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	runeproperties.Name = runepropertiesDB.Name_Data.String
	runeproperties.IsBold = runepropertiesDB.IsBold_Data.Bool
	runeproperties.IsStrike = runepropertiesDB.IsStrike_Data.Bool
	runeproperties.IsItalic = runepropertiesDB.IsItalic_Data.Bool
	runeproperties.Content = runepropertiesDB.Content_Data.String
}

// CopyBasicFieldsToRunePropertiesWOP
func (runepropertiesDB *RunePropertiesDB) CopyBasicFieldsToRunePropertiesWOP(runeproperties *RunePropertiesWOP) {
	runeproperties.ID = int(runepropertiesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	runeproperties.Name = runepropertiesDB.Name_Data.String
	runeproperties.IsBold = runepropertiesDB.IsBold_Data.Bool
	runeproperties.IsStrike = runepropertiesDB.IsStrike_Data.Bool
	runeproperties.IsItalic = runepropertiesDB.IsItalic_Data.Bool
	runeproperties.Content = runepropertiesDB.Content_Data.String
}

// Backup generates a json file from a slice of all RunePropertiesDB instances in the backrepo
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RunePropertiesDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RunePropertiesDB, 0)
	for _, runepropertiesDB := range backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB {
		forBackup = append(forBackup, runepropertiesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json RuneProperties ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json RuneProperties file", err.Error())
	}
}

// Backup generates a json file from a slice of all RunePropertiesDB instances in the backrepo
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RunePropertiesDB, 0)
	for _, runepropertiesDB := range backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB {
		forBackup = append(forBackup, runepropertiesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("RuneProperties")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&RuneProperties_Fields, -1)
	for _, runepropertiesDB := range forBackup {

		var runepropertiesWOP RunePropertiesWOP
		runepropertiesDB.CopyBasicFieldsToRunePropertiesWOP(&runepropertiesWOP)

		row := sh.AddRow()
		row.WriteStruct(&runepropertiesWOP, -1)
	}
}

// RestoreXL from the "RuneProperties" sheet all RunePropertiesDB instances
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRunePropertiesid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["RuneProperties"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRuneProperties.rowVisitorRuneProperties)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRuneProperties *BackRepoRunePropertiesStruct) rowVisitorRuneProperties(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var runepropertiesWOP RunePropertiesWOP
		row.ReadStruct(&runepropertiesWOP)

		// add the unmarshalled struct to the stage
		runepropertiesDB := new(RunePropertiesDB)
		runepropertiesDB.CopyBasicFieldsFromRunePropertiesWOP(&runepropertiesWOP)

		runepropertiesDB_ID_atBackupTime := runepropertiesDB.ID
		runepropertiesDB.ID = 0
		_, err := backRepoRuneProperties.db.Create(runepropertiesDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB[runepropertiesDB.ID] = runepropertiesDB
		BackRepoRunePropertiesid_atBckpTime_newID[runepropertiesDB_ID_atBackupTime] = runepropertiesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RunePropertiesDB.json" in dirPath that stores an array
// of RunePropertiesDB and stores it in the database
// the map BackRepoRunePropertiesid_atBckpTime_newID is updated accordingly
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRunePropertiesid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RunePropertiesDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json RuneProperties file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RunePropertiesDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RunePropertiesDBID_RunePropertiesDB
	for _, runepropertiesDB := range forRestore {

		runepropertiesDB_ID_atBackupTime := runepropertiesDB.ID
		runepropertiesDB.ID = 0
		_, err := backRepoRuneProperties.db.Create(runepropertiesDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB[runepropertiesDB.ID] = runepropertiesDB
		BackRepoRunePropertiesid_atBckpTime_newID[runepropertiesDB_ID_atBackupTime] = runepropertiesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json RuneProperties file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<RuneProperties>id_atBckpTime_newID
// to compute new index
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) RestorePhaseTwo() {

	for _, runepropertiesDB := range backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB {

		// next line of code is to avert unused variable compilation error
		_ = runepropertiesDB

		// insertion point for reindexing pointers encoding
		// reindexing Node field
		if runepropertiesDB.NodeID.Int64 != 0 {
			runepropertiesDB.NodeID.Int64 = int64(BackRepoNodeid_atBckpTime_newID[uint(runepropertiesDB.NodeID.Int64)])
			runepropertiesDB.NodeID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoRuneProperties.db.Model(runepropertiesDB)
		_, err := db.Updates(*runepropertiesDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoRuneProperties.ResetReversePointers commits all staged instances of RuneProperties to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRuneProperties *BackRepoRunePropertiesStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, runeproperties := range backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesPtr {
		backRepoRuneProperties.ResetReversePointersInstance(backRepo, idx, runeproperties)
	}

	return
}

func (backRepoRuneProperties *BackRepoRunePropertiesStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, runeproperties *models.RuneProperties) (Error error) {

	// fetch matching runepropertiesDB
	if runepropertiesDB, ok := backRepoRuneProperties.Map_RunePropertiesDBID_RunePropertiesDB[idx]; ok {
		_ = runepropertiesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRunePropertiesid_atBckpTime_newID map[uint]uint
