// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdocx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_File_sql sql.NullBool
var dummy_File_time time.Duration
var dummy_File_sort sort.Float64Slice

// FileAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model fileAPI
type FileAPI struct {
	gorm.Model

	models.File

	// encoding of pointers
	FilePointersEnconding
}

// FilePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FilePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field Docx{}.Files []*File
	Docx_FilesDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Docx_FilesDBID_Index sql.NullInt64
}

// FileDB describes a file in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model fileDB
type FileDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field fileDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	FilePointersEnconding
}

// FileDBs arrays fileDBs
// swagger:response fileDBsResponse
type FileDBs []FileDB

// FileDBResponse provides response
// swagger:response fileDBResponse
type FileDBResponse struct {
	FileDB
}

// FileWOP is a File without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FileWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var File_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoFileStruct struct {
	// stores FileDB according to their gorm ID
	Map_FileDBID_FileDB map[uint]*FileDB

	// stores FileDB ID according to File address
	Map_FilePtr_FileDBID map[*models.File]uint

	// stores File according to their gorm ID
	Map_FileDBID_FilePtr map[uint]*models.File

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFile *BackRepoFileStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFile.stage
	return
}

func (backRepoFile *BackRepoFileStruct) GetDB() *gorm.DB {
	return backRepoFile.db
}

// GetFileDBFromFilePtr is a handy function to access the back repo instance from the stage instance
func (backRepoFile *BackRepoFileStruct) GetFileDBFromFilePtr(file *models.File) (fileDB *FileDB) {
	id := backRepoFile.Map_FilePtr_FileDBID[file]
	fileDB = backRepoFile.Map_FileDBID_FileDB[id]
	return
}

// BackRepoFile.CommitPhaseOne commits all staged instances of File to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFile *BackRepoFileStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for file := range stage.Files {
		backRepoFile.CommitPhaseOneInstance(file)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, file := range backRepoFile.Map_FileDBID_FilePtr {
		if _, ok := stage.Files[file]; !ok {
			backRepoFile.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFile.CommitDeleteInstance commits deletion of File to the BackRepo
func (backRepoFile *BackRepoFileStruct) CommitDeleteInstance(id uint) (Error error) {

	file := backRepoFile.Map_FileDBID_FilePtr[id]

	// file is not staged anymore, remove fileDB
	fileDB := backRepoFile.Map_FileDBID_FileDB[id]
	query := backRepoFile.db.Unscoped().Delete(&fileDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoFile.Map_FilePtr_FileDBID, file)
	delete(backRepoFile.Map_FileDBID_FilePtr, id)
	delete(backRepoFile.Map_FileDBID_FileDB, id)

	return
}

// BackRepoFile.CommitPhaseOneInstance commits file staged instances of File to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFile *BackRepoFileStruct) CommitPhaseOneInstance(file *models.File) (Error error) {

	// check if the file is not commited yet
	if _, ok := backRepoFile.Map_FilePtr_FileDBID[file]; ok {
		return
	}

	// initiate file
	var fileDB FileDB
	fileDB.CopyBasicFieldsFromFile(file)

	query := backRepoFile.db.Create(&fileDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoFile.Map_FilePtr_FileDBID[file] = fileDB.ID
	backRepoFile.Map_FileDBID_FilePtr[fileDB.ID] = file
	backRepoFile.Map_FileDBID_FileDB[fileDB.ID] = &fileDB

	return
}

// BackRepoFile.CommitPhaseTwo commits all staged instances of File to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFile *BackRepoFileStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, file := range backRepoFile.Map_FileDBID_FilePtr {
		backRepoFile.CommitPhaseTwoInstance(backRepo, idx, file)
	}

	return
}

// BackRepoFile.CommitPhaseTwoInstance commits {{structname }} of models.File to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFile *BackRepoFileStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, file *models.File) (Error error) {

	// fetch matching fileDB
	if fileDB, ok := backRepoFile.Map_FileDBID_FileDB[idx]; ok {

		fileDB.CopyBasicFieldsFromFile(file)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFile.db.Save(&fileDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown File intance %s", file.Name))
		return err
	}

	return
}

// BackRepoFile.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFile *BackRepoFileStruct) CheckoutPhaseOne() (Error error) {

	fileDBArray := make([]FileDB, 0)
	query := backRepoFile.db.Find(&fileDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	fileInstancesToBeRemovedFromTheStage := make(map[*models.File]any)
	for key, value := range backRepoFile.stage.Files {
		fileInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, fileDB := range fileDBArray {
		backRepoFile.CheckoutPhaseOneInstance(&fileDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		file, ok := backRepoFile.Map_FileDBID_FilePtr[fileDB.ID]
		if ok {
			delete(fileInstancesToBeRemovedFromTheStage, file)
		}
	}

	// remove from stage and back repo's 3 maps all files that are not in the checkout
	for file := range fileInstancesToBeRemovedFromTheStage {
		file.Unstage(backRepoFile.GetStage())

		// remove instance from the back repo 3 maps
		fileID := backRepoFile.Map_FilePtr_FileDBID[file]
		delete(backRepoFile.Map_FilePtr_FileDBID, file)
		delete(backRepoFile.Map_FileDBID_FileDB, fileID)
		delete(backRepoFile.Map_FileDBID_FilePtr, fileID)
	}

	return
}

// CheckoutPhaseOneInstance takes a fileDB that has been found in the DB, updates the backRepo and stages the
// models version of the fileDB
func (backRepoFile *BackRepoFileStruct) CheckoutPhaseOneInstance(fileDB *FileDB) (Error error) {

	file, ok := backRepoFile.Map_FileDBID_FilePtr[fileDB.ID]
	if !ok {
		file = new(models.File)

		backRepoFile.Map_FileDBID_FilePtr[fileDB.ID] = file
		backRepoFile.Map_FilePtr_FileDBID[file] = fileDB.ID

		// append model store with the new element
		file.Name = fileDB.Name_Data.String
		file.Stage(backRepoFile.GetStage())
	}
	fileDB.CopyBasicFieldsToFile(file)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	file.Stage(backRepoFile.GetStage())

	// preserve pointer to fileDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FileDBID_FileDB)[fileDB hold variable pointers
	fileDB_Data := *fileDB
	preservedPtrToFile := &fileDB_Data
	backRepoFile.Map_FileDBID_FileDB[fileDB.ID] = preservedPtrToFile

	return
}

// BackRepoFile.CheckoutPhaseTwo Checkouts all staged instances of File to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFile *BackRepoFileStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, fileDB := range backRepoFile.Map_FileDBID_FileDB {
		backRepoFile.CheckoutPhaseTwoInstance(backRepo, fileDB)
	}
	return
}

// BackRepoFile.CheckoutPhaseTwoInstance Checkouts staged instances of File to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFile *BackRepoFileStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, fileDB *FileDB) (Error error) {

	file := backRepoFile.Map_FileDBID_FilePtr[fileDB.ID]
	_ = file // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitFile allows commit of a single file (if already staged)
func (backRepo *BackRepoStruct) CommitFile(file *models.File) {
	backRepo.BackRepoFile.CommitPhaseOneInstance(file)
	if id, ok := backRepo.BackRepoFile.Map_FilePtr_FileDBID[file]; ok {
		backRepo.BackRepoFile.CommitPhaseTwoInstance(backRepo, id, file)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFile allows checkout of a single file (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFile(file *models.File) {
	// check if the file is staged
	if _, ok := backRepo.BackRepoFile.Map_FilePtr_FileDBID[file]; ok {

		if id, ok := backRepo.BackRepoFile.Map_FilePtr_FileDBID[file]; ok {
			var fileDB FileDB
			fileDB.ID = id

			if err := backRepo.BackRepoFile.db.First(&fileDB, id).Error; err != nil {
				log.Panicln("CheckoutFile : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFile.CheckoutPhaseOneInstance(&fileDB)
			backRepo.BackRepoFile.CheckoutPhaseTwoInstance(backRepo, &fileDB)
		}
	}
}

// CopyBasicFieldsFromFile
func (fileDB *FileDB) CopyBasicFieldsFromFile(file *models.File) {
	// insertion point for fields commit

	fileDB.Name_Data.String = file.Name
	fileDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFileWOP
func (fileDB *FileDB) CopyBasicFieldsFromFileWOP(file *FileWOP) {
	// insertion point for fields commit

	fileDB.Name_Data.String = file.Name
	fileDB.Name_Data.Valid = true
}

// CopyBasicFieldsToFile
func (fileDB *FileDB) CopyBasicFieldsToFile(file *models.File) {
	// insertion point for checkout of basic fields (back repo to stage)
	file.Name = fileDB.Name_Data.String
}

// CopyBasicFieldsToFileWOP
func (fileDB *FileDB) CopyBasicFieldsToFileWOP(file *FileWOP) {
	file.ID = int(fileDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	file.Name = fileDB.Name_Data.String
}

// Backup generates a json file from a slice of all FileDB instances in the backrepo
func (backRepoFile *BackRepoFileStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FileDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FileDB, 0)
	for _, fileDB := range backRepoFile.Map_FileDBID_FileDB {
		forBackup = append(forBackup, fileDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json File ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json File file", err.Error())
	}
}

// Backup generates a json file from a slice of all FileDB instances in the backrepo
func (backRepoFile *BackRepoFileStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FileDB, 0)
	for _, fileDB := range backRepoFile.Map_FileDBID_FileDB {
		forBackup = append(forBackup, fileDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("File")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&File_Fields, -1)
	for _, fileDB := range forBackup {

		var fileWOP FileWOP
		fileDB.CopyBasicFieldsToFileWOP(&fileWOP)

		row := sh.AddRow()
		row.WriteStruct(&fileWOP, -1)
	}
}

// RestoreXL from the "File" sheet all FileDB instances
func (backRepoFile *BackRepoFileStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFileid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["File"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFile.rowVisitorFile)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoFile *BackRepoFileStruct) rowVisitorFile(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var fileWOP FileWOP
		row.ReadStruct(&fileWOP)

		// add the unmarshalled struct to the stage
		fileDB := new(FileDB)
		fileDB.CopyBasicFieldsFromFileWOP(&fileWOP)

		fileDB_ID_atBackupTime := fileDB.ID
		fileDB.ID = 0
		query := backRepoFile.db.Create(fileDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFile.Map_FileDBID_FileDB[fileDB.ID] = fileDB
		BackRepoFileid_atBckpTime_newID[fileDB_ID_atBackupTime] = fileDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FileDB.json" in dirPath that stores an array
// of FileDB and stores it in the database
// the map BackRepoFileid_atBckpTime_newID is updated accordingly
func (backRepoFile *BackRepoFileStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFileid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FileDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json File file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FileDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FileDBID_FileDB
	for _, fileDB := range forRestore {

		fileDB_ID_atBackupTime := fileDB.ID
		fileDB.ID = 0
		query := backRepoFile.db.Create(fileDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFile.Map_FileDBID_FileDB[fileDB.ID] = fileDB
		BackRepoFileid_atBckpTime_newID[fileDB_ID_atBackupTime] = fileDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json File file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<File>id_atBckpTime_newID
// to compute new index
func (backRepoFile *BackRepoFileStruct) RestorePhaseTwo() {

	for _, fileDB := range backRepoFile.Map_FileDBID_FileDB {

		// next line of code is to avert unused variable compilation error
		_ = fileDB

		// insertion point for reindexing pointers encoding
		// This reindex file.Files
		if fileDB.Docx_FilesDBID.Int64 != 0 {
			fileDB.Docx_FilesDBID.Int64 =
				int64(BackRepoDocxid_atBckpTime_newID[uint(fileDB.Docx_FilesDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoFile.db.Model(fileDB).Updates(*fileDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// BackRepoFile.ResetReversePointers commits all staged instances of File to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFile *BackRepoFileStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, file := range backRepoFile.Map_FileDBID_FilePtr {
		backRepoFile.ResetReversePointersInstance(backRepo, idx, file)
	}

	return
}

func (backRepoFile *BackRepoFileStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, astruct *models.File) (Error error) {

	// fetch matching fileDB
	if fileDB, ok := backRepoFile.Map_FileDBID_FileDB[idx]; ok {
		_ = fileDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		if fileDB.Docx_FilesDBID.Int64 != 0 {
			fileDB.Docx_FilesDBID.Int64 = 0
			fileDB.Docx_FilesDBID.Valid = true

			// save the reset
			if q := backRepoFile.db.Save(fileDB); q.Error != nil {
				return q.Error
			}
		}
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFileid_atBckpTime_newID map[uint]uint
