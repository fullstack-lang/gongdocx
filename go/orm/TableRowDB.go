// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdocx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TableRow_sql sql.NullBool
var dummy_TableRow_time time.Duration
var dummy_TableRow_sort sort.Float64Slice

// TableRowAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tablerowAPI
type TableRowAPI struct {
	gorm.Model

	models.TableRow_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TableRowPointersEncoding TableRowPointersEncoding
}

// TableRowPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TableRowPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Node is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NodeID sql.NullInt64

	// field TableColumns is a slice of pointers to another Struct (optional or 0..1)
	TableColumns IntSlice `gorm:"type:TEXT"`
}

// TableRowDB describes a tablerow in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tablerowDB
type TableRowDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tablerowDB.Name
	Name_Data sql.NullString

	// Declation for basic field tablerowDB.Content
	Content_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TableRowPointersEncoding
}

// TableRowDBs arrays tablerowDBs
// swagger:response tablerowDBsResponse
type TableRowDBs []TableRowDB

// TableRowDBResponse provides response
// swagger:response tablerowDBResponse
type TableRowDBResponse struct {
	TableRowDB
}

// TableRowWOP is a TableRow without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TableRowWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var TableRow_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
}

type BackRepoTableRowStruct struct {
	// stores TableRowDB according to their gorm ID
	Map_TableRowDBID_TableRowDB map[uint]*TableRowDB

	// stores TableRowDB ID according to TableRow address
	Map_TableRowPtr_TableRowDBID map[*models.TableRow]uint

	// stores TableRow according to their gorm ID
	Map_TableRowDBID_TableRowPtr map[uint]*models.TableRow

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTableRow *BackRepoTableRowStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTableRow.stage
	return
}

func (backRepoTableRow *BackRepoTableRowStruct) GetDB() *gorm.DB {
	return backRepoTableRow.db
}

// GetTableRowDBFromTableRowPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTableRow *BackRepoTableRowStruct) GetTableRowDBFromTableRowPtr(tablerow *models.TableRow) (tablerowDB *TableRowDB) {
	id := backRepoTableRow.Map_TableRowPtr_TableRowDBID[tablerow]
	tablerowDB = backRepoTableRow.Map_TableRowDBID_TableRowDB[id]
	return
}

// BackRepoTableRow.CommitPhaseOne commits all staged instances of TableRow to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTableRow *BackRepoTableRowStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tablerow := range stage.TableRows {
		backRepoTableRow.CommitPhaseOneInstance(tablerow)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tablerow := range backRepoTableRow.Map_TableRowDBID_TableRowPtr {
		if _, ok := stage.TableRows[tablerow]; !ok {
			backRepoTableRow.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTableRow.CommitDeleteInstance commits deletion of TableRow to the BackRepo
func (backRepoTableRow *BackRepoTableRowStruct) CommitDeleteInstance(id uint) (Error error) {

	tablerow := backRepoTableRow.Map_TableRowDBID_TableRowPtr[id]

	// tablerow is not staged anymore, remove tablerowDB
	tablerowDB := backRepoTableRow.Map_TableRowDBID_TableRowDB[id]
	query := backRepoTableRow.db.Unscoped().Delete(&tablerowDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTableRow.Map_TableRowPtr_TableRowDBID, tablerow)
	delete(backRepoTableRow.Map_TableRowDBID_TableRowPtr, id)
	delete(backRepoTableRow.Map_TableRowDBID_TableRowDB, id)

	return
}

// BackRepoTableRow.CommitPhaseOneInstance commits tablerow staged instances of TableRow to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTableRow *BackRepoTableRowStruct) CommitPhaseOneInstance(tablerow *models.TableRow) (Error error) {

	// check if the tablerow is not commited yet
	if _, ok := backRepoTableRow.Map_TableRowPtr_TableRowDBID[tablerow]; ok {
		return
	}

	// initiate tablerow
	var tablerowDB TableRowDB
	tablerowDB.CopyBasicFieldsFromTableRow(tablerow)

	query := backRepoTableRow.db.Create(&tablerowDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTableRow.Map_TableRowPtr_TableRowDBID[tablerow] = tablerowDB.ID
	backRepoTableRow.Map_TableRowDBID_TableRowPtr[tablerowDB.ID] = tablerow
	backRepoTableRow.Map_TableRowDBID_TableRowDB[tablerowDB.ID] = &tablerowDB

	return
}

// BackRepoTableRow.CommitPhaseTwo commits all staged instances of TableRow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableRow *BackRepoTableRowStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tablerow := range backRepoTableRow.Map_TableRowDBID_TableRowPtr {
		backRepoTableRow.CommitPhaseTwoInstance(backRepo, idx, tablerow)
	}

	return
}

// BackRepoTableRow.CommitPhaseTwoInstance commits {{structname }} of models.TableRow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableRow *BackRepoTableRowStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tablerow *models.TableRow) (Error error) {

	// fetch matching tablerowDB
	if tablerowDB, ok := backRepoTableRow.Map_TableRowDBID_TableRowDB[idx]; ok {

		tablerowDB.CopyBasicFieldsFromTableRow(tablerow)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value tablerow.Node translates to updating the tablerow.NodeID
		tablerowDB.NodeID.Valid = true // allow for a 0 value (nil association)
		if tablerow.Node != nil {
			if NodeId, ok := backRepo.BackRepoNode.Map_NodePtr_NodeDBID[tablerow.Node]; ok {
				tablerowDB.NodeID.Int64 = int64(NodeId)
				tablerowDB.NodeID.Valid = true
			}
		} else {
			tablerowDB.NodeID.Int64 = 0
			tablerowDB.NodeID.Valid = true
		}

		// 1. reset
		tablerowDB.TableRowPointersEncoding.TableColumns = make([]int, 0)
		// 2. encode
		for _, tablecolumnAssocEnd := range tablerow.TableColumns {
			tablecolumnAssocEnd_DB :=
				backRepo.BackRepoTableColumn.GetTableColumnDBFromTableColumnPtr(tablecolumnAssocEnd)
			
			// the stage might be inconsistant, meaning that the tablecolumnAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if tablecolumnAssocEnd_DB == nil {
				continue
			}
			
			tablerowDB.TableRowPointersEncoding.TableColumns =
				append(tablerowDB.TableRowPointersEncoding.TableColumns, int(tablecolumnAssocEnd_DB.ID))
		}

		query := backRepoTableRow.db.Save(&tablerowDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TableRow intance %s", tablerow.Name))
		return err
	}

	return
}

// BackRepoTableRow.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTableRow *BackRepoTableRowStruct) CheckoutPhaseOne() (Error error) {

	tablerowDBArray := make([]TableRowDB, 0)
	query := backRepoTableRow.db.Find(&tablerowDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tablerowInstancesToBeRemovedFromTheStage := make(map[*models.TableRow]any)
	for key, value := range backRepoTableRow.stage.TableRows {
		tablerowInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tablerowDB := range tablerowDBArray {
		backRepoTableRow.CheckoutPhaseOneInstance(&tablerowDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tablerow, ok := backRepoTableRow.Map_TableRowDBID_TableRowPtr[tablerowDB.ID]
		if ok {
			delete(tablerowInstancesToBeRemovedFromTheStage, tablerow)
		}
	}

	// remove from stage and back repo's 3 maps all tablerows that are not in the checkout
	for tablerow := range tablerowInstancesToBeRemovedFromTheStage {
		tablerow.Unstage(backRepoTableRow.GetStage())

		// remove instance from the back repo 3 maps
		tablerowID := backRepoTableRow.Map_TableRowPtr_TableRowDBID[tablerow]
		delete(backRepoTableRow.Map_TableRowPtr_TableRowDBID, tablerow)
		delete(backRepoTableRow.Map_TableRowDBID_TableRowDB, tablerowID)
		delete(backRepoTableRow.Map_TableRowDBID_TableRowPtr, tablerowID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tablerowDB that has been found in the DB, updates the backRepo and stages the
// models version of the tablerowDB
func (backRepoTableRow *BackRepoTableRowStruct) CheckoutPhaseOneInstance(tablerowDB *TableRowDB) (Error error) {

	tablerow, ok := backRepoTableRow.Map_TableRowDBID_TableRowPtr[tablerowDB.ID]
	if !ok {
		tablerow = new(models.TableRow)

		backRepoTableRow.Map_TableRowDBID_TableRowPtr[tablerowDB.ID] = tablerow
		backRepoTableRow.Map_TableRowPtr_TableRowDBID[tablerow] = tablerowDB.ID

		// append model store with the new element
		tablerow.Name = tablerowDB.Name_Data.String
		tablerow.Stage(backRepoTableRow.GetStage())
	}
	tablerowDB.CopyBasicFieldsToTableRow(tablerow)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tablerow.Stage(backRepoTableRow.GetStage())

	// preserve pointer to tablerowDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TableRowDBID_TableRowDB)[tablerowDB hold variable pointers
	tablerowDB_Data := *tablerowDB
	preservedPtrToTableRow := &tablerowDB_Data
	backRepoTableRow.Map_TableRowDBID_TableRowDB[tablerowDB.ID] = preservedPtrToTableRow

	return
}

// BackRepoTableRow.CheckoutPhaseTwo Checkouts all staged instances of TableRow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableRow *BackRepoTableRowStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tablerowDB := range backRepoTableRow.Map_TableRowDBID_TableRowDB {
		backRepoTableRow.CheckoutPhaseTwoInstance(backRepo, tablerowDB)
	}
	return
}

// BackRepoTableRow.CheckoutPhaseTwoInstance Checkouts staged instances of TableRow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableRow *BackRepoTableRowStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tablerowDB *TableRowDB) (Error error) {

	tablerow := backRepoTableRow.Map_TableRowDBID_TableRowPtr[tablerowDB.ID]

	tablerowDB.DecodePointers(backRepo, tablerow)

	return
}

func (tablerowDB *TableRowDB) DecodePointers(backRepo *BackRepoStruct, tablerow *models.TableRow) {

	// insertion point for checkout of pointer encoding
	// Node field
	tablerow.Node = nil
	if tablerowDB.NodeID.Int64 != 0 {
		tablerow.Node = backRepo.BackRepoNode.Map_NodeDBID_NodePtr[uint(tablerowDB.NodeID.Int64)]
	}
	// This loop redeem tablerow.TableColumns in the stage from the encode in the back repo
	// It parses all TableColumnDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	tablerow.TableColumns = tablerow.TableColumns[:0]
	for _, _TableColumnid := range tablerowDB.TableRowPointersEncoding.TableColumns {
		tablerow.TableColumns = append(tablerow.TableColumns, backRepo.BackRepoTableColumn.Map_TableColumnDBID_TableColumnPtr[uint(_TableColumnid)])
	}

	return
}

// CommitTableRow allows commit of a single tablerow (if already staged)
func (backRepo *BackRepoStruct) CommitTableRow(tablerow *models.TableRow) {
	backRepo.BackRepoTableRow.CommitPhaseOneInstance(tablerow)
	if id, ok := backRepo.BackRepoTableRow.Map_TableRowPtr_TableRowDBID[tablerow]; ok {
		backRepo.BackRepoTableRow.CommitPhaseTwoInstance(backRepo, id, tablerow)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTableRow allows checkout of a single tablerow (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTableRow(tablerow *models.TableRow) {
	// check if the tablerow is staged
	if _, ok := backRepo.BackRepoTableRow.Map_TableRowPtr_TableRowDBID[tablerow]; ok {

		if id, ok := backRepo.BackRepoTableRow.Map_TableRowPtr_TableRowDBID[tablerow]; ok {
			var tablerowDB TableRowDB
			tablerowDB.ID = id

			if err := backRepo.BackRepoTableRow.db.First(&tablerowDB, id).Error; err != nil {
				log.Fatalln("CheckoutTableRow : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTableRow.CheckoutPhaseOneInstance(&tablerowDB)
			backRepo.BackRepoTableRow.CheckoutPhaseTwoInstance(backRepo, &tablerowDB)
		}
	}
}

// CopyBasicFieldsFromTableRow
func (tablerowDB *TableRowDB) CopyBasicFieldsFromTableRow(tablerow *models.TableRow) {
	// insertion point for fields commit

	tablerowDB.Name_Data.String = tablerow.Name
	tablerowDB.Name_Data.Valid = true

	tablerowDB.Content_Data.String = tablerow.Content
	tablerowDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromTableRow_WOP
func (tablerowDB *TableRowDB) CopyBasicFieldsFromTableRow_WOP(tablerow *models.TableRow_WOP) {
	// insertion point for fields commit

	tablerowDB.Name_Data.String = tablerow.Name
	tablerowDB.Name_Data.Valid = true

	tablerowDB.Content_Data.String = tablerow.Content
	tablerowDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromTableRowWOP
func (tablerowDB *TableRowDB) CopyBasicFieldsFromTableRowWOP(tablerow *TableRowWOP) {
	// insertion point for fields commit

	tablerowDB.Name_Data.String = tablerow.Name
	tablerowDB.Name_Data.Valid = true

	tablerowDB.Content_Data.String = tablerow.Content
	tablerowDB.Content_Data.Valid = true
}

// CopyBasicFieldsToTableRow
func (tablerowDB *TableRowDB) CopyBasicFieldsToTableRow(tablerow *models.TableRow) {
	// insertion point for checkout of basic fields (back repo to stage)
	tablerow.Name = tablerowDB.Name_Data.String
	tablerow.Content = tablerowDB.Content_Data.String
}

// CopyBasicFieldsToTableRow_WOP
func (tablerowDB *TableRowDB) CopyBasicFieldsToTableRow_WOP(tablerow *models.TableRow_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tablerow.Name = tablerowDB.Name_Data.String
	tablerow.Content = tablerowDB.Content_Data.String
}

// CopyBasicFieldsToTableRowWOP
func (tablerowDB *TableRowDB) CopyBasicFieldsToTableRowWOP(tablerow *TableRowWOP) {
	tablerow.ID = int(tablerowDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tablerow.Name = tablerowDB.Name_Data.String
	tablerow.Content = tablerowDB.Content_Data.String
}

// Backup generates a json file from a slice of all TableRowDB instances in the backrepo
func (backRepoTableRow *BackRepoTableRowStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TableRowDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TableRowDB, 0)
	for _, tablerowDB := range backRepoTableRow.Map_TableRowDBID_TableRowDB {
		forBackup = append(forBackup, tablerowDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json TableRow ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json TableRow file", err.Error())
	}
}

// Backup generates a json file from a slice of all TableRowDB instances in the backrepo
func (backRepoTableRow *BackRepoTableRowStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TableRowDB, 0)
	for _, tablerowDB := range backRepoTableRow.Map_TableRowDBID_TableRowDB {
		forBackup = append(forBackup, tablerowDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TableRow")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TableRow_Fields, -1)
	for _, tablerowDB := range forBackup {

		var tablerowWOP TableRowWOP
		tablerowDB.CopyBasicFieldsToTableRowWOP(&tablerowWOP)

		row := sh.AddRow()
		row.WriteStruct(&tablerowWOP, -1)
	}
}

// RestoreXL from the "TableRow" sheet all TableRowDB instances
func (backRepoTableRow *BackRepoTableRowStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTableRowid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TableRow"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTableRow.rowVisitorTableRow)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTableRow *BackRepoTableRowStruct) rowVisitorTableRow(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tablerowWOP TableRowWOP
		row.ReadStruct(&tablerowWOP)

		// add the unmarshalled struct to the stage
		tablerowDB := new(TableRowDB)
		tablerowDB.CopyBasicFieldsFromTableRowWOP(&tablerowWOP)

		tablerowDB_ID_atBackupTime := tablerowDB.ID
		tablerowDB.ID = 0
		query := backRepoTableRow.db.Create(tablerowDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTableRow.Map_TableRowDBID_TableRowDB[tablerowDB.ID] = tablerowDB
		BackRepoTableRowid_atBckpTime_newID[tablerowDB_ID_atBackupTime] = tablerowDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TableRowDB.json" in dirPath that stores an array
// of TableRowDB and stores it in the database
// the map BackRepoTableRowid_atBckpTime_newID is updated accordingly
func (backRepoTableRow *BackRepoTableRowStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTableRowid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TableRowDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json TableRow file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TableRowDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TableRowDBID_TableRowDB
	for _, tablerowDB := range forRestore {

		tablerowDB_ID_atBackupTime := tablerowDB.ID
		tablerowDB.ID = 0
		query := backRepoTableRow.db.Create(tablerowDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTableRow.Map_TableRowDBID_TableRowDB[tablerowDB.ID] = tablerowDB
		BackRepoTableRowid_atBckpTime_newID[tablerowDB_ID_atBackupTime] = tablerowDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json TableRow file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TableRow>id_atBckpTime_newID
// to compute new index
func (backRepoTableRow *BackRepoTableRowStruct) RestorePhaseTwo() {

	for _, tablerowDB := range backRepoTableRow.Map_TableRowDBID_TableRowDB {

		// next line of code is to avert unused variable compilation error
		_ = tablerowDB

		// insertion point for reindexing pointers encoding
		// reindexing Node field
		if tablerowDB.NodeID.Int64 != 0 {
			tablerowDB.NodeID.Int64 = int64(BackRepoNodeid_atBckpTime_newID[uint(tablerowDB.NodeID.Int64)])
			tablerowDB.NodeID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoTableRow.db.Model(tablerowDB).Updates(*tablerowDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTableRow.ResetReversePointers commits all staged instances of TableRow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableRow *BackRepoTableRowStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tablerow := range backRepoTableRow.Map_TableRowDBID_TableRowPtr {
		backRepoTableRow.ResetReversePointersInstance(backRepo, idx, tablerow)
	}

	return
}

func (backRepoTableRow *BackRepoTableRowStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tablerow *models.TableRow) (Error error) {

	// fetch matching tablerowDB
	if tablerowDB, ok := backRepoTableRow.Map_TableRowDBID_TableRowDB[idx]; ok {
		_ = tablerowDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTableRowid_atBckpTime_newID map[uint]uint
