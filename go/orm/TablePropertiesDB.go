// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdocx/go/db"
	"github.com/fullstack-lang/gongdocx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TableProperties_sql sql.NullBool
var dummy_TableProperties_time time.Duration
var dummy_TableProperties_sort sort.Float64Slice

// TablePropertiesAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tablepropertiesAPI
type TablePropertiesAPI struct {
	gorm.Model

	models.TableProperties_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TablePropertiesPointersEncoding TablePropertiesPointersEncoding
}

// TablePropertiesPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TablePropertiesPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Node is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NodeID sql.NullInt64

	// field TableStyle is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TableStyleID sql.NullInt64
}

// TablePropertiesDB describes a tableproperties in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tablepropertiesDB
type TablePropertiesDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tablepropertiesDB.Name
	Name_Data sql.NullString

	// Declation for basic field tablepropertiesDB.Content
	Content_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TablePropertiesPointersEncoding
}

// TablePropertiesDBs arrays tablepropertiesDBs
// swagger:response tablepropertiesDBsResponse
type TablePropertiesDBs []TablePropertiesDB

// TablePropertiesDBResponse provides response
// swagger:response tablepropertiesDBResponse
type TablePropertiesDBResponse struct {
	TablePropertiesDB
}

// TablePropertiesWOP is a TableProperties without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TablePropertiesWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var TableProperties_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
}

type BackRepoTablePropertiesStruct struct {
	// stores TablePropertiesDB according to their gorm ID
	Map_TablePropertiesDBID_TablePropertiesDB map[uint]*TablePropertiesDB

	// stores TablePropertiesDB ID according to TableProperties address
	Map_TablePropertiesPtr_TablePropertiesDBID map[*models.TableProperties]uint

	// stores TableProperties according to their gorm ID
	Map_TablePropertiesDBID_TablePropertiesPtr map[uint]*models.TableProperties

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoTableProperties *BackRepoTablePropertiesStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTableProperties.stage
	return
}

func (backRepoTableProperties *BackRepoTablePropertiesStruct) GetDB() db.DBInterface {
	return backRepoTableProperties.db
}

// GetTablePropertiesDBFromTablePropertiesPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTableProperties *BackRepoTablePropertiesStruct) GetTablePropertiesDBFromTablePropertiesPtr(tableproperties *models.TableProperties) (tablepropertiesDB *TablePropertiesDB) {
	id := backRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID[tableproperties]
	tablepropertiesDB = backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB[id]
	return
}

// BackRepoTableProperties.CommitPhaseOne commits all staged instances of TableProperties to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTableProperties *BackRepoTablePropertiesStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tableproperties := range stage.TablePropertiess {
		backRepoTableProperties.CommitPhaseOneInstance(tableproperties)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tableproperties := range backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr {
		if _, ok := stage.TablePropertiess[tableproperties]; !ok {
			backRepoTableProperties.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTableProperties.CommitDeleteInstance commits deletion of TableProperties to the BackRepo
func (backRepoTableProperties *BackRepoTablePropertiesStruct) CommitDeleteInstance(id uint) (Error error) {

	tableproperties := backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr[id]

	// tableproperties is not staged anymore, remove tablepropertiesDB
	tablepropertiesDB := backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB[id]
	db, _ := backRepoTableProperties.db.Unscoped()
	_, err := db.Delete(tablepropertiesDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID, tableproperties)
	delete(backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr, id)
	delete(backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB, id)

	return
}

// BackRepoTableProperties.CommitPhaseOneInstance commits tableproperties staged instances of TableProperties to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTableProperties *BackRepoTablePropertiesStruct) CommitPhaseOneInstance(tableproperties *models.TableProperties) (Error error) {

	// check if the tableproperties is not commited yet
	if _, ok := backRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID[tableproperties]; ok {
		return
	}

	// initiate tableproperties
	var tablepropertiesDB TablePropertiesDB
	tablepropertiesDB.CopyBasicFieldsFromTableProperties(tableproperties)

	_, err := backRepoTableProperties.db.Create(&tablepropertiesDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID[tableproperties] = tablepropertiesDB.ID
	backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr[tablepropertiesDB.ID] = tableproperties
	backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB[tablepropertiesDB.ID] = &tablepropertiesDB

	return
}

// BackRepoTableProperties.CommitPhaseTwo commits all staged instances of TableProperties to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableProperties *BackRepoTablePropertiesStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tableproperties := range backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr {
		backRepoTableProperties.CommitPhaseTwoInstance(backRepo, idx, tableproperties)
	}

	return
}

// BackRepoTableProperties.CommitPhaseTwoInstance commits {{structname }} of models.TableProperties to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableProperties *BackRepoTablePropertiesStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tableproperties *models.TableProperties) (Error error) {

	// fetch matching tablepropertiesDB
	if tablepropertiesDB, ok := backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB[idx]; ok {

		tablepropertiesDB.CopyBasicFieldsFromTableProperties(tableproperties)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value tableproperties.Node translates to updating the tableproperties.NodeID
		tablepropertiesDB.NodeID.Valid = true // allow for a 0 value (nil association)
		if tableproperties.Node != nil {
			if NodeId, ok := backRepo.BackRepoNode.Map_NodePtr_NodeDBID[tableproperties.Node]; ok {
				tablepropertiesDB.NodeID.Int64 = int64(NodeId)
				tablepropertiesDB.NodeID.Valid = true
			}
		} else {
			tablepropertiesDB.NodeID.Int64 = 0
			tablepropertiesDB.NodeID.Valid = true
		}

		// commit pointer value tableproperties.TableStyle translates to updating the tableproperties.TableStyleID
		tablepropertiesDB.TableStyleID.Valid = true // allow for a 0 value (nil association)
		if tableproperties.TableStyle != nil {
			if TableStyleId, ok := backRepo.BackRepoTableStyle.Map_TableStylePtr_TableStyleDBID[tableproperties.TableStyle]; ok {
				tablepropertiesDB.TableStyleID.Int64 = int64(TableStyleId)
				tablepropertiesDB.TableStyleID.Valid = true
			}
		} else {
			tablepropertiesDB.TableStyleID.Int64 = 0
			tablepropertiesDB.TableStyleID.Valid = true
		}

		_, err := backRepoTableProperties.db.Save(tablepropertiesDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TableProperties intance %s", tableproperties.Name))
		return err
	}

	return
}

// BackRepoTableProperties.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTableProperties *BackRepoTablePropertiesStruct) CheckoutPhaseOne() (Error error) {

	tablepropertiesDBArray := make([]TablePropertiesDB, 0)
	_, err := backRepoTableProperties.db.Find(&tablepropertiesDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tablepropertiesInstancesToBeRemovedFromTheStage := make(map[*models.TableProperties]any)
	for key, value := range backRepoTableProperties.stage.TablePropertiess {
		tablepropertiesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tablepropertiesDB := range tablepropertiesDBArray {
		backRepoTableProperties.CheckoutPhaseOneInstance(&tablepropertiesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tableproperties, ok := backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr[tablepropertiesDB.ID]
		if ok {
			delete(tablepropertiesInstancesToBeRemovedFromTheStage, tableproperties)
		}
	}

	// remove from stage and back repo's 3 maps all tablepropertiess that are not in the checkout
	for tableproperties := range tablepropertiesInstancesToBeRemovedFromTheStage {
		tableproperties.Unstage(backRepoTableProperties.GetStage())

		// remove instance from the back repo 3 maps
		tablepropertiesID := backRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID[tableproperties]
		delete(backRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID, tableproperties)
		delete(backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB, tablepropertiesID)
		delete(backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr, tablepropertiesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tablepropertiesDB that has been found in the DB, updates the backRepo and stages the
// models version of the tablepropertiesDB
func (backRepoTableProperties *BackRepoTablePropertiesStruct) CheckoutPhaseOneInstance(tablepropertiesDB *TablePropertiesDB) (Error error) {

	tableproperties, ok := backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr[tablepropertiesDB.ID]
	if !ok {
		tableproperties = new(models.TableProperties)

		backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr[tablepropertiesDB.ID] = tableproperties
		backRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID[tableproperties] = tablepropertiesDB.ID

		// append model store with the new element
		tableproperties.Name = tablepropertiesDB.Name_Data.String
		tableproperties.Stage(backRepoTableProperties.GetStage())
	}
	tablepropertiesDB.CopyBasicFieldsToTableProperties(tableproperties)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tableproperties.Stage(backRepoTableProperties.GetStage())

	// preserve pointer to tablepropertiesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TablePropertiesDBID_TablePropertiesDB)[tablepropertiesDB hold variable pointers
	tablepropertiesDB_Data := *tablepropertiesDB
	preservedPtrToTableProperties := &tablepropertiesDB_Data
	backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB[tablepropertiesDB.ID] = preservedPtrToTableProperties

	return
}

// BackRepoTableProperties.CheckoutPhaseTwo Checkouts all staged instances of TableProperties to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableProperties *BackRepoTablePropertiesStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tablepropertiesDB := range backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB {
		backRepoTableProperties.CheckoutPhaseTwoInstance(backRepo, tablepropertiesDB)
	}
	return
}

// BackRepoTableProperties.CheckoutPhaseTwoInstance Checkouts staged instances of TableProperties to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableProperties *BackRepoTablePropertiesStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tablepropertiesDB *TablePropertiesDB) (Error error) {

	tableproperties := backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr[tablepropertiesDB.ID]

	tablepropertiesDB.DecodePointers(backRepo, tableproperties)

	return
}

func (tablepropertiesDB *TablePropertiesDB) DecodePointers(backRepo *BackRepoStruct, tableproperties *models.TableProperties) {

	// insertion point for checkout of pointer encoding
	// Node field
	tableproperties.Node = nil
	if tablepropertiesDB.NodeID.Int64 != 0 {
		tableproperties.Node = backRepo.BackRepoNode.Map_NodeDBID_NodePtr[uint(tablepropertiesDB.NodeID.Int64)]
	}
	// TableStyle field
	tableproperties.TableStyle = nil
	if tablepropertiesDB.TableStyleID.Int64 != 0 {
		tableproperties.TableStyle = backRepo.BackRepoTableStyle.Map_TableStyleDBID_TableStylePtr[uint(tablepropertiesDB.TableStyleID.Int64)]
	}
	return
}

// CommitTableProperties allows commit of a single tableproperties (if already staged)
func (backRepo *BackRepoStruct) CommitTableProperties(tableproperties *models.TableProperties) {
	backRepo.BackRepoTableProperties.CommitPhaseOneInstance(tableproperties)
	if id, ok := backRepo.BackRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID[tableproperties]; ok {
		backRepo.BackRepoTableProperties.CommitPhaseTwoInstance(backRepo, id, tableproperties)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTableProperties allows checkout of a single tableproperties (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTableProperties(tableproperties *models.TableProperties) {
	// check if the tableproperties is staged
	if _, ok := backRepo.BackRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID[tableproperties]; ok {

		if id, ok := backRepo.BackRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID[tableproperties]; ok {
			var tablepropertiesDB TablePropertiesDB
			tablepropertiesDB.ID = id

			if _, err := backRepo.BackRepoTableProperties.db.First(&tablepropertiesDB, id); err != nil {
				log.Fatalln("CheckoutTableProperties : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTableProperties.CheckoutPhaseOneInstance(&tablepropertiesDB)
			backRepo.BackRepoTableProperties.CheckoutPhaseTwoInstance(backRepo, &tablepropertiesDB)
		}
	}
}

// CopyBasicFieldsFromTableProperties
func (tablepropertiesDB *TablePropertiesDB) CopyBasicFieldsFromTableProperties(tableproperties *models.TableProperties) {
	// insertion point for fields commit

	tablepropertiesDB.Name_Data.String = tableproperties.Name
	tablepropertiesDB.Name_Data.Valid = true

	tablepropertiesDB.Content_Data.String = tableproperties.Content
	tablepropertiesDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromTableProperties_WOP
func (tablepropertiesDB *TablePropertiesDB) CopyBasicFieldsFromTableProperties_WOP(tableproperties *models.TableProperties_WOP) {
	// insertion point for fields commit

	tablepropertiesDB.Name_Data.String = tableproperties.Name
	tablepropertiesDB.Name_Data.Valid = true

	tablepropertiesDB.Content_Data.String = tableproperties.Content
	tablepropertiesDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromTablePropertiesWOP
func (tablepropertiesDB *TablePropertiesDB) CopyBasicFieldsFromTablePropertiesWOP(tableproperties *TablePropertiesWOP) {
	// insertion point for fields commit

	tablepropertiesDB.Name_Data.String = tableproperties.Name
	tablepropertiesDB.Name_Data.Valid = true

	tablepropertiesDB.Content_Data.String = tableproperties.Content
	tablepropertiesDB.Content_Data.Valid = true
}

// CopyBasicFieldsToTableProperties
func (tablepropertiesDB *TablePropertiesDB) CopyBasicFieldsToTableProperties(tableproperties *models.TableProperties) {
	// insertion point for checkout of basic fields (back repo to stage)
	tableproperties.Name = tablepropertiesDB.Name_Data.String
	tableproperties.Content = tablepropertiesDB.Content_Data.String
}

// CopyBasicFieldsToTableProperties_WOP
func (tablepropertiesDB *TablePropertiesDB) CopyBasicFieldsToTableProperties_WOP(tableproperties *models.TableProperties_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	tableproperties.Name = tablepropertiesDB.Name_Data.String
	tableproperties.Content = tablepropertiesDB.Content_Data.String
}

// CopyBasicFieldsToTablePropertiesWOP
func (tablepropertiesDB *TablePropertiesDB) CopyBasicFieldsToTablePropertiesWOP(tableproperties *TablePropertiesWOP) {
	tableproperties.ID = int(tablepropertiesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tableproperties.Name = tablepropertiesDB.Name_Data.String
	tableproperties.Content = tablepropertiesDB.Content_Data.String
}

// Backup generates a json file from a slice of all TablePropertiesDB instances in the backrepo
func (backRepoTableProperties *BackRepoTablePropertiesStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TablePropertiesDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TablePropertiesDB, 0)
	for _, tablepropertiesDB := range backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB {
		forBackup = append(forBackup, tablepropertiesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json TableProperties ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json TableProperties file", err.Error())
	}
}

// Backup generates a json file from a slice of all TablePropertiesDB instances in the backrepo
func (backRepoTableProperties *BackRepoTablePropertiesStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TablePropertiesDB, 0)
	for _, tablepropertiesDB := range backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB {
		forBackup = append(forBackup, tablepropertiesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TableProperties")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TableProperties_Fields, -1)
	for _, tablepropertiesDB := range forBackup {

		var tablepropertiesWOP TablePropertiesWOP
		tablepropertiesDB.CopyBasicFieldsToTablePropertiesWOP(&tablepropertiesWOP)

		row := sh.AddRow()
		row.WriteStruct(&tablepropertiesWOP, -1)
	}
}

// RestoreXL from the "TableProperties" sheet all TablePropertiesDB instances
func (backRepoTableProperties *BackRepoTablePropertiesStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTablePropertiesid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TableProperties"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTableProperties.rowVisitorTableProperties)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTableProperties *BackRepoTablePropertiesStruct) rowVisitorTableProperties(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tablepropertiesWOP TablePropertiesWOP
		row.ReadStruct(&tablepropertiesWOP)

		// add the unmarshalled struct to the stage
		tablepropertiesDB := new(TablePropertiesDB)
		tablepropertiesDB.CopyBasicFieldsFromTablePropertiesWOP(&tablepropertiesWOP)

		tablepropertiesDB_ID_atBackupTime := tablepropertiesDB.ID
		tablepropertiesDB.ID = 0
		_, err := backRepoTableProperties.db.Create(tablepropertiesDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB[tablepropertiesDB.ID] = tablepropertiesDB
		BackRepoTablePropertiesid_atBckpTime_newID[tablepropertiesDB_ID_atBackupTime] = tablepropertiesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TablePropertiesDB.json" in dirPath that stores an array
// of TablePropertiesDB and stores it in the database
// the map BackRepoTablePropertiesid_atBckpTime_newID is updated accordingly
func (backRepoTableProperties *BackRepoTablePropertiesStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTablePropertiesid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TablePropertiesDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json TableProperties file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TablePropertiesDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TablePropertiesDBID_TablePropertiesDB
	for _, tablepropertiesDB := range forRestore {

		tablepropertiesDB_ID_atBackupTime := tablepropertiesDB.ID
		tablepropertiesDB.ID = 0
		_, err := backRepoTableProperties.db.Create(tablepropertiesDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB[tablepropertiesDB.ID] = tablepropertiesDB
		BackRepoTablePropertiesid_atBckpTime_newID[tablepropertiesDB_ID_atBackupTime] = tablepropertiesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json TableProperties file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TableProperties>id_atBckpTime_newID
// to compute new index
func (backRepoTableProperties *BackRepoTablePropertiesStruct) RestorePhaseTwo() {

	for _, tablepropertiesDB := range backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB {

		// next line of code is to avert unused variable compilation error
		_ = tablepropertiesDB

		// insertion point for reindexing pointers encoding
		// reindexing Node field
		if tablepropertiesDB.NodeID.Int64 != 0 {
			tablepropertiesDB.NodeID.Int64 = int64(BackRepoNodeid_atBckpTime_newID[uint(tablepropertiesDB.NodeID.Int64)])
			tablepropertiesDB.NodeID.Valid = true
		}

		// reindexing TableStyle field
		if tablepropertiesDB.TableStyleID.Int64 != 0 {
			tablepropertiesDB.TableStyleID.Int64 = int64(BackRepoTableStyleid_atBckpTime_newID[uint(tablepropertiesDB.TableStyleID.Int64)])
			tablepropertiesDB.TableStyleID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoTableProperties.db.Model(tablepropertiesDB)
		_, err := db.Updates(*tablepropertiesDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoTableProperties.ResetReversePointers commits all staged instances of TableProperties to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableProperties *BackRepoTablePropertiesStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, tableproperties := range backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr {
		backRepoTableProperties.ResetReversePointersInstance(backRepo, idx, tableproperties)
	}

	return
}

func (backRepoTableProperties *BackRepoTablePropertiesStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, tableproperties *models.TableProperties) (Error error) {

	// fetch matching tablepropertiesDB
	if tablepropertiesDB, ok := backRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesDB[idx]; ok {
		_ = tablepropertiesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTablePropertiesid_atBckpTime_newID map[uint]uint
