// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdocx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ParagraphStyle_sql sql.NullBool
var dummy_ParagraphStyle_time time.Duration
var dummy_ParagraphStyle_sort sort.Float64Slice

// ParagraphStyleAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model paragraphstyleAPI
type ParagraphStyleAPI struct {
	gorm.Model

	models.ParagraphStyle_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ParagraphStylePointersEncoding ParagraphStylePointersEncoding
}

// ParagraphStylePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ParagraphStylePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Node is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NodeID sql.NullInt64
}

// ParagraphStyleDB describes a paragraphstyle in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model paragraphstyleDB
type ParagraphStyleDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field paragraphstyleDB.Name
	Name_Data sql.NullString

	// Declation for basic field paragraphstyleDB.Content
	Content_Data sql.NullString

	// Declation for basic field paragraphstyleDB.ValAttr
	ValAttr_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ParagraphStylePointersEncoding
}

// ParagraphStyleDBs arrays paragraphstyleDBs
// swagger:response paragraphstyleDBsResponse
type ParagraphStyleDBs []ParagraphStyleDB

// ParagraphStyleDBResponse provides response
// swagger:response paragraphstyleDBResponse
type ParagraphStyleDBResponse struct {
	ParagraphStyleDB
}

// ParagraphStyleWOP is a ParagraphStyle without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ParagraphStyleWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`

	ValAttr string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var ParagraphStyle_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
	"ValAttr",
}

type BackRepoParagraphStyleStruct struct {
	// stores ParagraphStyleDB according to their gorm ID
	Map_ParagraphStyleDBID_ParagraphStyleDB map[uint]*ParagraphStyleDB

	// stores ParagraphStyleDB ID according to ParagraphStyle address
	Map_ParagraphStylePtr_ParagraphStyleDBID map[*models.ParagraphStyle]uint

	// stores ParagraphStyle according to their gorm ID
	Map_ParagraphStyleDBID_ParagraphStylePtr map[uint]*models.ParagraphStyle

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoParagraphStyle.stage
	return
}

func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) GetDB() *gorm.DB {
	return backRepoParagraphStyle.db
}

// GetParagraphStyleDBFromParagraphStylePtr is a handy function to access the back repo instance from the stage instance
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) GetParagraphStyleDBFromParagraphStylePtr(paragraphstyle *models.ParagraphStyle) (paragraphstyleDB *ParagraphStyleDB) {
	id := backRepoParagraphStyle.Map_ParagraphStylePtr_ParagraphStyleDBID[paragraphstyle]
	paragraphstyleDB = backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB[id]
	return
}

// BackRepoParagraphStyle.CommitPhaseOne commits all staged instances of ParagraphStyle to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for paragraphstyle := range stage.ParagraphStyles {
		backRepoParagraphStyle.CommitPhaseOneInstance(paragraphstyle)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, paragraphstyle := range backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr {
		if _, ok := stage.ParagraphStyles[paragraphstyle]; !ok {
			backRepoParagraphStyle.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoParagraphStyle.CommitDeleteInstance commits deletion of ParagraphStyle to the BackRepo
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) CommitDeleteInstance(id uint) (Error error) {

	paragraphstyle := backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr[id]

	// paragraphstyle is not staged anymore, remove paragraphstyleDB
	paragraphstyleDB := backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB[id]
	query := backRepoParagraphStyle.db.Unscoped().Delete(&paragraphstyleDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoParagraphStyle.Map_ParagraphStylePtr_ParagraphStyleDBID, paragraphstyle)
	delete(backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr, id)
	delete(backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB, id)

	return
}

// BackRepoParagraphStyle.CommitPhaseOneInstance commits paragraphstyle staged instances of ParagraphStyle to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) CommitPhaseOneInstance(paragraphstyle *models.ParagraphStyle) (Error error) {

	// check if the paragraphstyle is not commited yet
	if _, ok := backRepoParagraphStyle.Map_ParagraphStylePtr_ParagraphStyleDBID[paragraphstyle]; ok {
		return
	}

	// initiate paragraphstyle
	var paragraphstyleDB ParagraphStyleDB
	paragraphstyleDB.CopyBasicFieldsFromParagraphStyle(paragraphstyle)

	query := backRepoParagraphStyle.db.Create(&paragraphstyleDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoParagraphStyle.Map_ParagraphStylePtr_ParagraphStyleDBID[paragraphstyle] = paragraphstyleDB.ID
	backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr[paragraphstyleDB.ID] = paragraphstyle
	backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB[paragraphstyleDB.ID] = &paragraphstyleDB

	return
}

// BackRepoParagraphStyle.CommitPhaseTwo commits all staged instances of ParagraphStyle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, paragraphstyle := range backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr {
		backRepoParagraphStyle.CommitPhaseTwoInstance(backRepo, idx, paragraphstyle)
	}

	return
}

// BackRepoParagraphStyle.CommitPhaseTwoInstance commits {{structname }} of models.ParagraphStyle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, paragraphstyle *models.ParagraphStyle) (Error error) {

	// fetch matching paragraphstyleDB
	if paragraphstyleDB, ok := backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB[idx]; ok {

		paragraphstyleDB.CopyBasicFieldsFromParagraphStyle(paragraphstyle)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value paragraphstyle.Node translates to updating the paragraphstyle.NodeID
		paragraphstyleDB.NodeID.Valid = true // allow for a 0 value (nil association)
		if paragraphstyle.Node != nil {
			if NodeId, ok := backRepo.BackRepoNode.Map_NodePtr_NodeDBID[paragraphstyle.Node]; ok {
				paragraphstyleDB.NodeID.Int64 = int64(NodeId)
				paragraphstyleDB.NodeID.Valid = true
			}
		} else {
			paragraphstyleDB.NodeID.Int64 = 0
			paragraphstyleDB.NodeID.Valid = true
		}

		query := backRepoParagraphStyle.db.Save(&paragraphstyleDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ParagraphStyle intance %s", paragraphstyle.Name))
		return err
	}

	return
}

// BackRepoParagraphStyle.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) CheckoutPhaseOne() (Error error) {

	paragraphstyleDBArray := make([]ParagraphStyleDB, 0)
	query := backRepoParagraphStyle.db.Find(&paragraphstyleDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	paragraphstyleInstancesToBeRemovedFromTheStage := make(map[*models.ParagraphStyle]any)
	for key, value := range backRepoParagraphStyle.stage.ParagraphStyles {
		paragraphstyleInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, paragraphstyleDB := range paragraphstyleDBArray {
		backRepoParagraphStyle.CheckoutPhaseOneInstance(&paragraphstyleDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		paragraphstyle, ok := backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr[paragraphstyleDB.ID]
		if ok {
			delete(paragraphstyleInstancesToBeRemovedFromTheStage, paragraphstyle)
		}
	}

	// remove from stage and back repo's 3 maps all paragraphstyles that are not in the checkout
	for paragraphstyle := range paragraphstyleInstancesToBeRemovedFromTheStage {
		paragraphstyle.Unstage(backRepoParagraphStyle.GetStage())

		// remove instance from the back repo 3 maps
		paragraphstyleID := backRepoParagraphStyle.Map_ParagraphStylePtr_ParagraphStyleDBID[paragraphstyle]
		delete(backRepoParagraphStyle.Map_ParagraphStylePtr_ParagraphStyleDBID, paragraphstyle)
		delete(backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB, paragraphstyleID)
		delete(backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr, paragraphstyleID)
	}

	return
}

// CheckoutPhaseOneInstance takes a paragraphstyleDB that has been found in the DB, updates the backRepo and stages the
// models version of the paragraphstyleDB
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) CheckoutPhaseOneInstance(paragraphstyleDB *ParagraphStyleDB) (Error error) {

	paragraphstyle, ok := backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr[paragraphstyleDB.ID]
	if !ok {
		paragraphstyle = new(models.ParagraphStyle)

		backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr[paragraphstyleDB.ID] = paragraphstyle
		backRepoParagraphStyle.Map_ParagraphStylePtr_ParagraphStyleDBID[paragraphstyle] = paragraphstyleDB.ID

		// append model store with the new element
		paragraphstyle.Name = paragraphstyleDB.Name_Data.String
		paragraphstyle.Stage(backRepoParagraphStyle.GetStage())
	}
	paragraphstyleDB.CopyBasicFieldsToParagraphStyle(paragraphstyle)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	paragraphstyle.Stage(backRepoParagraphStyle.GetStage())

	// preserve pointer to paragraphstyleDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ParagraphStyleDBID_ParagraphStyleDB)[paragraphstyleDB hold variable pointers
	paragraphstyleDB_Data := *paragraphstyleDB
	preservedPtrToParagraphStyle := &paragraphstyleDB_Data
	backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB[paragraphstyleDB.ID] = preservedPtrToParagraphStyle

	return
}

// BackRepoParagraphStyle.CheckoutPhaseTwo Checkouts all staged instances of ParagraphStyle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, paragraphstyleDB := range backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB {
		backRepoParagraphStyle.CheckoutPhaseTwoInstance(backRepo, paragraphstyleDB)
	}
	return
}

// BackRepoParagraphStyle.CheckoutPhaseTwoInstance Checkouts staged instances of ParagraphStyle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, paragraphstyleDB *ParagraphStyleDB) (Error error) {

	paragraphstyle := backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr[paragraphstyleDB.ID]

	paragraphstyleDB.DecodePointers(backRepo, paragraphstyle)

	return
}

func (paragraphstyleDB *ParagraphStyleDB) DecodePointers(backRepo *BackRepoStruct, paragraphstyle *models.ParagraphStyle) {

	// insertion point for checkout of pointer encoding
	// Node field
	paragraphstyle.Node = nil
	if paragraphstyleDB.NodeID.Int64 != 0 {
		paragraphstyle.Node = backRepo.BackRepoNode.Map_NodeDBID_NodePtr[uint(paragraphstyleDB.NodeID.Int64)]
	}
	return
}

// CommitParagraphStyle allows commit of a single paragraphstyle (if already staged)
func (backRepo *BackRepoStruct) CommitParagraphStyle(paragraphstyle *models.ParagraphStyle) {
	backRepo.BackRepoParagraphStyle.CommitPhaseOneInstance(paragraphstyle)
	if id, ok := backRepo.BackRepoParagraphStyle.Map_ParagraphStylePtr_ParagraphStyleDBID[paragraphstyle]; ok {
		backRepo.BackRepoParagraphStyle.CommitPhaseTwoInstance(backRepo, id, paragraphstyle)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitParagraphStyle allows checkout of a single paragraphstyle (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutParagraphStyle(paragraphstyle *models.ParagraphStyle) {
	// check if the paragraphstyle is staged
	if _, ok := backRepo.BackRepoParagraphStyle.Map_ParagraphStylePtr_ParagraphStyleDBID[paragraphstyle]; ok {

		if id, ok := backRepo.BackRepoParagraphStyle.Map_ParagraphStylePtr_ParagraphStyleDBID[paragraphstyle]; ok {
			var paragraphstyleDB ParagraphStyleDB
			paragraphstyleDB.ID = id

			if err := backRepo.BackRepoParagraphStyle.db.First(&paragraphstyleDB, id).Error; err != nil {
				log.Fatalln("CheckoutParagraphStyle : Problem with getting object with id:", id)
			}
			backRepo.BackRepoParagraphStyle.CheckoutPhaseOneInstance(&paragraphstyleDB)
			backRepo.BackRepoParagraphStyle.CheckoutPhaseTwoInstance(backRepo, &paragraphstyleDB)
		}
	}
}

// CopyBasicFieldsFromParagraphStyle
func (paragraphstyleDB *ParagraphStyleDB) CopyBasicFieldsFromParagraphStyle(paragraphstyle *models.ParagraphStyle) {
	// insertion point for fields commit

	paragraphstyleDB.Name_Data.String = paragraphstyle.Name
	paragraphstyleDB.Name_Data.Valid = true

	paragraphstyleDB.Content_Data.String = paragraphstyle.Content
	paragraphstyleDB.Content_Data.Valid = true

	paragraphstyleDB.ValAttr_Data.String = paragraphstyle.ValAttr
	paragraphstyleDB.ValAttr_Data.Valid = true
}

// CopyBasicFieldsFromParagraphStyle_WOP
func (paragraphstyleDB *ParagraphStyleDB) CopyBasicFieldsFromParagraphStyle_WOP(paragraphstyle *models.ParagraphStyle_WOP) {
	// insertion point for fields commit

	paragraphstyleDB.Name_Data.String = paragraphstyle.Name
	paragraphstyleDB.Name_Data.Valid = true

	paragraphstyleDB.Content_Data.String = paragraphstyle.Content
	paragraphstyleDB.Content_Data.Valid = true

	paragraphstyleDB.ValAttr_Data.String = paragraphstyle.ValAttr
	paragraphstyleDB.ValAttr_Data.Valid = true
}

// CopyBasicFieldsFromParagraphStyleWOP
func (paragraphstyleDB *ParagraphStyleDB) CopyBasicFieldsFromParagraphStyleWOP(paragraphstyle *ParagraphStyleWOP) {
	// insertion point for fields commit

	paragraphstyleDB.Name_Data.String = paragraphstyle.Name
	paragraphstyleDB.Name_Data.Valid = true

	paragraphstyleDB.Content_Data.String = paragraphstyle.Content
	paragraphstyleDB.Content_Data.Valid = true

	paragraphstyleDB.ValAttr_Data.String = paragraphstyle.ValAttr
	paragraphstyleDB.ValAttr_Data.Valid = true
}

// CopyBasicFieldsToParagraphStyle
func (paragraphstyleDB *ParagraphStyleDB) CopyBasicFieldsToParagraphStyle(paragraphstyle *models.ParagraphStyle) {
	// insertion point for checkout of basic fields (back repo to stage)
	paragraphstyle.Name = paragraphstyleDB.Name_Data.String
	paragraphstyle.Content = paragraphstyleDB.Content_Data.String
	paragraphstyle.ValAttr = paragraphstyleDB.ValAttr_Data.String
}

// CopyBasicFieldsToParagraphStyle_WOP
func (paragraphstyleDB *ParagraphStyleDB) CopyBasicFieldsToParagraphStyle_WOP(paragraphstyle *models.ParagraphStyle_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	paragraphstyle.Name = paragraphstyleDB.Name_Data.String
	paragraphstyle.Content = paragraphstyleDB.Content_Data.String
	paragraphstyle.ValAttr = paragraphstyleDB.ValAttr_Data.String
}

// CopyBasicFieldsToParagraphStyleWOP
func (paragraphstyleDB *ParagraphStyleDB) CopyBasicFieldsToParagraphStyleWOP(paragraphstyle *ParagraphStyleWOP) {
	paragraphstyle.ID = int(paragraphstyleDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	paragraphstyle.Name = paragraphstyleDB.Name_Data.String
	paragraphstyle.Content = paragraphstyleDB.Content_Data.String
	paragraphstyle.ValAttr = paragraphstyleDB.ValAttr_Data.String
}

// Backup generates a json file from a slice of all ParagraphStyleDB instances in the backrepo
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ParagraphStyleDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ParagraphStyleDB, 0)
	for _, paragraphstyleDB := range backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB {
		forBackup = append(forBackup, paragraphstyleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ParagraphStyle ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ParagraphStyle file", err.Error())
	}
}

// Backup generates a json file from a slice of all ParagraphStyleDB instances in the backrepo
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ParagraphStyleDB, 0)
	for _, paragraphstyleDB := range backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB {
		forBackup = append(forBackup, paragraphstyleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ParagraphStyle")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ParagraphStyle_Fields, -1)
	for _, paragraphstyleDB := range forBackup {

		var paragraphstyleWOP ParagraphStyleWOP
		paragraphstyleDB.CopyBasicFieldsToParagraphStyleWOP(&paragraphstyleWOP)

		row := sh.AddRow()
		row.WriteStruct(&paragraphstyleWOP, -1)
	}
}

// RestoreXL from the "ParagraphStyle" sheet all ParagraphStyleDB instances
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoParagraphStyleid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ParagraphStyle"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoParagraphStyle.rowVisitorParagraphStyle)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) rowVisitorParagraphStyle(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var paragraphstyleWOP ParagraphStyleWOP
		row.ReadStruct(&paragraphstyleWOP)

		// add the unmarshalled struct to the stage
		paragraphstyleDB := new(ParagraphStyleDB)
		paragraphstyleDB.CopyBasicFieldsFromParagraphStyleWOP(&paragraphstyleWOP)

		paragraphstyleDB_ID_atBackupTime := paragraphstyleDB.ID
		paragraphstyleDB.ID = 0
		query := backRepoParagraphStyle.db.Create(paragraphstyleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB[paragraphstyleDB.ID] = paragraphstyleDB
		BackRepoParagraphStyleid_atBckpTime_newID[paragraphstyleDB_ID_atBackupTime] = paragraphstyleDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ParagraphStyleDB.json" in dirPath that stores an array
// of ParagraphStyleDB and stores it in the database
// the map BackRepoParagraphStyleid_atBckpTime_newID is updated accordingly
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoParagraphStyleid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ParagraphStyleDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ParagraphStyle file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ParagraphStyleDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ParagraphStyleDBID_ParagraphStyleDB
	for _, paragraphstyleDB := range forRestore {

		paragraphstyleDB_ID_atBackupTime := paragraphstyleDB.ID
		paragraphstyleDB.ID = 0
		query := backRepoParagraphStyle.db.Create(paragraphstyleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB[paragraphstyleDB.ID] = paragraphstyleDB
		BackRepoParagraphStyleid_atBckpTime_newID[paragraphstyleDB_ID_atBackupTime] = paragraphstyleDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ParagraphStyle file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ParagraphStyle>id_atBckpTime_newID
// to compute new index
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) RestorePhaseTwo() {

	for _, paragraphstyleDB := range backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB {

		// next line of code is to avert unused variable compilation error
		_ = paragraphstyleDB

		// insertion point for reindexing pointers encoding
		// reindexing Node field
		if paragraphstyleDB.NodeID.Int64 != 0 {
			paragraphstyleDB.NodeID.Int64 = int64(BackRepoNodeid_atBckpTime_newID[uint(paragraphstyleDB.NodeID.Int64)])
			paragraphstyleDB.NodeID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoParagraphStyle.db.Model(paragraphstyleDB).Updates(*paragraphstyleDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoParagraphStyle.ResetReversePointers commits all staged instances of ParagraphStyle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, paragraphstyle := range backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStylePtr {
		backRepoParagraphStyle.ResetReversePointersInstance(backRepo, idx, paragraphstyle)
	}

	return
}

func (backRepoParagraphStyle *BackRepoParagraphStyleStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, paragraphstyle *models.ParagraphStyle) (Error error) {

	// fetch matching paragraphstyleDB
	if paragraphstyleDB, ok := backRepoParagraphStyle.Map_ParagraphStyleDBID_ParagraphStyleDB[idx]; ok {
		_ = paragraphstyleDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoParagraphStyleid_atBckpTime_newID map[uint]uint
