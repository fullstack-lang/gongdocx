// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdocx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Docx_sql sql.NullBool
var dummy_Docx_time time.Duration
var dummy_Docx_sort sort.Float64Slice

// DocxAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model docxAPI
type DocxAPI struct {
	gorm.Model

	models.Docx

	// encoding of pointers
	DocxPointersEnconding
}

// DocxPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DocxPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Document is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DocumentID sql.NullInt64
}

// DocxDB describes a docx in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model docxDB
type DocxDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field docxDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	DocxPointersEnconding
}

// DocxDBs arrays docxDBs
// swagger:response docxDBsResponse
type DocxDBs []DocxDB

// DocxDBResponse provides response
// swagger:response docxDBResponse
type DocxDBResponse struct {
	DocxDB
}

// DocxWOP is a Docx without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DocxWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Docx_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoDocxStruct struct {
	// stores DocxDB according to their gorm ID
	Map_DocxDBID_DocxDB map[uint]*DocxDB

	// stores DocxDB ID according to Docx address
	Map_DocxPtr_DocxDBID map[*models.Docx]uint

	// stores Docx according to their gorm ID
	Map_DocxDBID_DocxPtr map[uint]*models.Docx

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDocx *BackRepoDocxStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDocx.stage
	return
}

func (backRepoDocx *BackRepoDocxStruct) GetDB() *gorm.DB {
	return backRepoDocx.db
}

// GetDocxDBFromDocxPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDocx *BackRepoDocxStruct) GetDocxDBFromDocxPtr(docx *models.Docx) (docxDB *DocxDB) {
	id := backRepoDocx.Map_DocxPtr_DocxDBID[docx]
	docxDB = backRepoDocx.Map_DocxDBID_DocxDB[id]
	return
}

// BackRepoDocx.CommitPhaseOne commits all staged instances of Docx to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDocx *BackRepoDocxStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for docx := range stage.Docxs {
		backRepoDocx.CommitPhaseOneInstance(docx)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, docx := range backRepoDocx.Map_DocxDBID_DocxPtr {
		if _, ok := stage.Docxs[docx]; !ok {
			backRepoDocx.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDocx.CommitDeleteInstance commits deletion of Docx to the BackRepo
func (backRepoDocx *BackRepoDocxStruct) CommitDeleteInstance(id uint) (Error error) {

	docx := backRepoDocx.Map_DocxDBID_DocxPtr[id]

	// docx is not staged anymore, remove docxDB
	docxDB := backRepoDocx.Map_DocxDBID_DocxDB[id]
	query := backRepoDocx.db.Unscoped().Delete(&docxDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoDocx.Map_DocxPtr_DocxDBID, docx)
	delete(backRepoDocx.Map_DocxDBID_DocxPtr, id)
	delete(backRepoDocx.Map_DocxDBID_DocxDB, id)

	return
}

// BackRepoDocx.CommitPhaseOneInstance commits docx staged instances of Docx to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDocx *BackRepoDocxStruct) CommitPhaseOneInstance(docx *models.Docx) (Error error) {

	// check if the docx is not commited yet
	if _, ok := backRepoDocx.Map_DocxPtr_DocxDBID[docx]; ok {
		return
	}

	// initiate docx
	var docxDB DocxDB
	docxDB.CopyBasicFieldsFromDocx(docx)

	query := backRepoDocx.db.Create(&docxDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoDocx.Map_DocxPtr_DocxDBID[docx] = docxDB.ID
	backRepoDocx.Map_DocxDBID_DocxPtr[docxDB.ID] = docx
	backRepoDocx.Map_DocxDBID_DocxDB[docxDB.ID] = &docxDB

	return
}

// BackRepoDocx.CommitPhaseTwo commits all staged instances of Docx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDocx *BackRepoDocxStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, docx := range backRepoDocx.Map_DocxDBID_DocxPtr {
		backRepoDocx.CommitPhaseTwoInstance(backRepo, idx, docx)
	}

	return
}

// BackRepoDocx.CommitPhaseTwoInstance commits {{structname }} of models.Docx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDocx *BackRepoDocxStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, docx *models.Docx) (Error error) {

	// fetch matching docxDB
	if docxDB, ok := backRepoDocx.Map_DocxDBID_DocxDB[idx]; ok {

		docxDB.CopyBasicFieldsFromDocx(docx)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers docx.Files into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, fileAssocEnd := range docx.Files {

			// get the back repo instance at the association end
			fileAssocEnd_DB :=
				backRepo.BackRepoFile.GetFileDBFromFilePtr(fileAssocEnd)

			// encode reverse pointer in the association end back repo instance
			fileAssocEnd_DB.Docx_FilesDBID.Int64 = int64(docxDB.ID)
			fileAssocEnd_DB.Docx_FilesDBID.Valid = true
			fileAssocEnd_DB.Docx_FilesDBID_Index.Int64 = int64(idx)
			fileAssocEnd_DB.Docx_FilesDBID_Index.Valid = true
			if q := backRepoDocx.db.Save(fileAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// commit pointer value docx.Document translates to updating the docx.DocumentID
		docxDB.DocumentID.Valid = true // allow for a 0 value (nil association)
		if docx.Document != nil {
			if DocumentId, ok := backRepo.BackRepoDocument.Map_DocumentPtr_DocumentDBID[docx.Document]; ok {
				docxDB.DocumentID.Int64 = int64(DocumentId)
				docxDB.DocumentID.Valid = true
			}
		}

		query := backRepoDocx.db.Save(&docxDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Docx intance %s", docx.Name))
		return err
	}

	return
}

// BackRepoDocx.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDocx *BackRepoDocxStruct) CheckoutPhaseOne() (Error error) {

	docxDBArray := make([]DocxDB, 0)
	query := backRepoDocx.db.Find(&docxDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	docxInstancesToBeRemovedFromTheStage := make(map[*models.Docx]any)
	for key, value := range backRepoDocx.stage.Docxs {
		docxInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, docxDB := range docxDBArray {
		backRepoDocx.CheckoutPhaseOneInstance(&docxDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		docx, ok := backRepoDocx.Map_DocxDBID_DocxPtr[docxDB.ID]
		if ok {
			delete(docxInstancesToBeRemovedFromTheStage, docx)
		}
	}

	// remove from stage and back repo's 3 maps all docxs that are not in the checkout
	for docx := range docxInstancesToBeRemovedFromTheStage {
		docx.Unstage(backRepoDocx.GetStage())

		// remove instance from the back repo 3 maps
		docxID := backRepoDocx.Map_DocxPtr_DocxDBID[docx]
		delete(backRepoDocx.Map_DocxPtr_DocxDBID, docx)
		delete(backRepoDocx.Map_DocxDBID_DocxDB, docxID)
		delete(backRepoDocx.Map_DocxDBID_DocxPtr, docxID)
	}

	return
}

// CheckoutPhaseOneInstance takes a docxDB that has been found in the DB, updates the backRepo and stages the
// models version of the docxDB
func (backRepoDocx *BackRepoDocxStruct) CheckoutPhaseOneInstance(docxDB *DocxDB) (Error error) {

	docx, ok := backRepoDocx.Map_DocxDBID_DocxPtr[docxDB.ID]
	if !ok {
		docx = new(models.Docx)

		backRepoDocx.Map_DocxDBID_DocxPtr[docxDB.ID] = docx
		backRepoDocx.Map_DocxPtr_DocxDBID[docx] = docxDB.ID

		// append model store with the new element
		docx.Name = docxDB.Name_Data.String
		docx.Stage(backRepoDocx.GetStage())
	}
	docxDB.CopyBasicFieldsToDocx(docx)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	docx.Stage(backRepoDocx.GetStage())

	// preserve pointer to docxDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DocxDBID_DocxDB)[docxDB hold variable pointers
	docxDB_Data := *docxDB
	preservedPtrToDocx := &docxDB_Data
	backRepoDocx.Map_DocxDBID_DocxDB[docxDB.ID] = preservedPtrToDocx

	return
}

// BackRepoDocx.CheckoutPhaseTwo Checkouts all staged instances of Docx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDocx *BackRepoDocxStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, docxDB := range backRepoDocx.Map_DocxDBID_DocxDB {
		backRepoDocx.CheckoutPhaseTwoInstance(backRepo, docxDB)
	}
	return
}

// BackRepoDocx.CheckoutPhaseTwoInstance Checkouts staged instances of Docx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDocx *BackRepoDocxStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, docxDB *DocxDB) (Error error) {

	docx := backRepoDocx.Map_DocxDBID_DocxPtr[docxDB.ID]
	_ = docx // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem docx.Files in the stage from the encode in the back repo
	// It parses all FileDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	docx.Files = docx.Files[:0]
	// 2. loop all instances in the type in the association end
	for _, fileDB_AssocEnd := range backRepo.BackRepoFile.Map_FileDBID_FileDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if fileDB_AssocEnd.Docx_FilesDBID.Int64 == int64(docxDB.ID) {
			// 4. fetch the associated instance in the stage
			file_AssocEnd := backRepo.BackRepoFile.Map_FileDBID_FilePtr[fileDB_AssocEnd.ID]
			// 5. append it the association slice
			docx.Files = append(docx.Files, file_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(docx.Files, func(i, j int) bool {
		fileDB_i_ID := backRepo.BackRepoFile.Map_FilePtr_FileDBID[docx.Files[i]]
		fileDB_j_ID := backRepo.BackRepoFile.Map_FilePtr_FileDBID[docx.Files[j]]

		fileDB_i := backRepo.BackRepoFile.Map_FileDBID_FileDB[fileDB_i_ID]
		fileDB_j := backRepo.BackRepoFile.Map_FileDBID_FileDB[fileDB_j_ID]

		return fileDB_i.Docx_FilesDBID_Index.Int64 < fileDB_j.Docx_FilesDBID_Index.Int64
	})

	// Document field
	if docxDB.DocumentID.Int64 != 0 {
		docx.Document = backRepo.BackRepoDocument.Map_DocumentDBID_DocumentPtr[uint(docxDB.DocumentID.Int64)]
	}
	return
}

// CommitDocx allows commit of a single docx (if already staged)
func (backRepo *BackRepoStruct) CommitDocx(docx *models.Docx) {
	backRepo.BackRepoDocx.CommitPhaseOneInstance(docx)
	if id, ok := backRepo.BackRepoDocx.Map_DocxPtr_DocxDBID[docx]; ok {
		backRepo.BackRepoDocx.CommitPhaseTwoInstance(backRepo, id, docx)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDocx allows checkout of a single docx (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDocx(docx *models.Docx) {
	// check if the docx is staged
	if _, ok := backRepo.BackRepoDocx.Map_DocxPtr_DocxDBID[docx]; ok {

		if id, ok := backRepo.BackRepoDocx.Map_DocxPtr_DocxDBID[docx]; ok {
			var docxDB DocxDB
			docxDB.ID = id

			if err := backRepo.BackRepoDocx.db.First(&docxDB, id).Error; err != nil {
				log.Panicln("CheckoutDocx : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDocx.CheckoutPhaseOneInstance(&docxDB)
			backRepo.BackRepoDocx.CheckoutPhaseTwoInstance(backRepo, &docxDB)
		}
	}
}

// CopyBasicFieldsFromDocx
func (docxDB *DocxDB) CopyBasicFieldsFromDocx(docx *models.Docx) {
	// insertion point for fields commit

	docxDB.Name_Data.String = docx.Name
	docxDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromDocxWOP
func (docxDB *DocxDB) CopyBasicFieldsFromDocxWOP(docx *DocxWOP) {
	// insertion point for fields commit

	docxDB.Name_Data.String = docx.Name
	docxDB.Name_Data.Valid = true
}

// CopyBasicFieldsToDocx
func (docxDB *DocxDB) CopyBasicFieldsToDocx(docx *models.Docx) {
	// insertion point for checkout of basic fields (back repo to stage)
	docx.Name = docxDB.Name_Data.String
}

// CopyBasicFieldsToDocxWOP
func (docxDB *DocxDB) CopyBasicFieldsToDocxWOP(docx *DocxWOP) {
	docx.ID = int(docxDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	docx.Name = docxDB.Name_Data.String
}

// Backup generates a json file from a slice of all DocxDB instances in the backrepo
func (backRepoDocx *BackRepoDocxStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DocxDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DocxDB, 0)
	for _, docxDB := range backRepoDocx.Map_DocxDBID_DocxDB {
		forBackup = append(forBackup, docxDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Docx ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Docx file", err.Error())
	}
}

// Backup generates a json file from a slice of all DocxDB instances in the backrepo
func (backRepoDocx *BackRepoDocxStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DocxDB, 0)
	for _, docxDB := range backRepoDocx.Map_DocxDBID_DocxDB {
		forBackup = append(forBackup, docxDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Docx")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Docx_Fields, -1)
	for _, docxDB := range forBackup {

		var docxWOP DocxWOP
		docxDB.CopyBasicFieldsToDocxWOP(&docxWOP)

		row := sh.AddRow()
		row.WriteStruct(&docxWOP, -1)
	}
}

// RestoreXL from the "Docx" sheet all DocxDB instances
func (backRepoDocx *BackRepoDocxStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDocxid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Docx"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDocx.rowVisitorDocx)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoDocx *BackRepoDocxStruct) rowVisitorDocx(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var docxWOP DocxWOP
		row.ReadStruct(&docxWOP)

		// add the unmarshalled struct to the stage
		docxDB := new(DocxDB)
		docxDB.CopyBasicFieldsFromDocxWOP(&docxWOP)

		docxDB_ID_atBackupTime := docxDB.ID
		docxDB.ID = 0
		query := backRepoDocx.db.Create(docxDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoDocx.Map_DocxDBID_DocxDB[docxDB.ID] = docxDB
		BackRepoDocxid_atBckpTime_newID[docxDB_ID_atBackupTime] = docxDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DocxDB.json" in dirPath that stores an array
// of DocxDB and stores it in the database
// the map BackRepoDocxid_atBckpTime_newID is updated accordingly
func (backRepoDocx *BackRepoDocxStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDocxid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DocxDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Docx file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DocxDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DocxDBID_DocxDB
	for _, docxDB := range forRestore {

		docxDB_ID_atBackupTime := docxDB.ID
		docxDB.ID = 0
		query := backRepoDocx.db.Create(docxDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoDocx.Map_DocxDBID_DocxDB[docxDB.ID] = docxDB
		BackRepoDocxid_atBckpTime_newID[docxDB_ID_atBackupTime] = docxDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Docx file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Docx>id_atBckpTime_newID
// to compute new index
func (backRepoDocx *BackRepoDocxStruct) RestorePhaseTwo() {

	for _, docxDB := range backRepoDocx.Map_DocxDBID_DocxDB {

		// next line of code is to avert unused variable compilation error
		_ = docxDB

		// insertion point for reindexing pointers encoding
		// reindexing Document field
		if docxDB.DocumentID.Int64 != 0 {
			docxDB.DocumentID.Int64 = int64(BackRepoDocumentid_atBckpTime_newID[uint(docxDB.DocumentID.Int64)])
			docxDB.DocumentID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoDocx.db.Model(docxDB).Updates(*docxDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDocxid_atBckpTime_newID map[uint]uint
