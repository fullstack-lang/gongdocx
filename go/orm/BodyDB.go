// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdocx/go/db"
	"github.com/fullstack-lang/gongdocx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Body_sql sql.NullBool
var dummy_Body_time time.Duration
var dummy_Body_sort sort.Float64Slice

// BodyAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bodyAPI
type BodyAPI struct {
	gorm.Model

	models.Body_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BodyPointersEncoding BodyPointersEncoding
}

// BodyPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BodyPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Paragraphs is a slice of pointers to another Struct (optional or 0..1)
	Paragraphs IntSlice `gorm:"type:TEXT"`

	// field Tables is a slice of pointers to another Struct (optional or 0..1)
	Tables IntSlice `gorm:"type:TEXT"`

	// field LastParagraph is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	LastParagraphID sql.NullInt64
}

// BodyDB describes a body in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bodyDB
type BodyDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bodyDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BodyPointersEncoding
}

// BodyDBs arrays bodyDBs
// swagger:response bodyDBsResponse
type BodyDBs []BodyDB

// BodyDBResponse provides response
// swagger:response bodyDBResponse
type BodyDBResponse struct {
	BodyDB
}

// BodyWOP is a Body without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BodyWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Body_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBodyStruct struct {
	// stores BodyDB according to their gorm ID
	Map_BodyDBID_BodyDB map[uint]*BodyDB

	// stores BodyDB ID according to Body address
	Map_BodyPtr_BodyDBID map[*models.Body]uint

	// stores Body according to their gorm ID
	Map_BodyDBID_BodyPtr map[uint]*models.Body

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoBody *BackRepoBodyStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBody.stage
	return
}

func (backRepoBody *BackRepoBodyStruct) GetDB() db.DBInterface {
	return backRepoBody.db
}

// GetBodyDBFromBodyPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBody *BackRepoBodyStruct) GetBodyDBFromBodyPtr(body *models.Body) (bodyDB *BodyDB) {
	id := backRepoBody.Map_BodyPtr_BodyDBID[body]
	bodyDB = backRepoBody.Map_BodyDBID_BodyDB[id]
	return
}

// BackRepoBody.CommitPhaseOne commits all staged instances of Body to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBody *BackRepoBodyStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for body := range stage.Bodys {
		backRepoBody.CommitPhaseOneInstance(body)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, body := range backRepoBody.Map_BodyDBID_BodyPtr {
		if _, ok := stage.Bodys[body]; !ok {
			backRepoBody.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBody.CommitDeleteInstance commits deletion of Body to the BackRepo
func (backRepoBody *BackRepoBodyStruct) CommitDeleteInstance(id uint) (Error error) {

	body := backRepoBody.Map_BodyDBID_BodyPtr[id]

	// body is not staged anymore, remove bodyDB
	bodyDB := backRepoBody.Map_BodyDBID_BodyDB[id]
	db, _ := backRepoBody.db.Unscoped()
	_, err := db.Delete(&bodyDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoBody.Map_BodyPtr_BodyDBID, body)
	delete(backRepoBody.Map_BodyDBID_BodyPtr, id)
	delete(backRepoBody.Map_BodyDBID_BodyDB, id)

	return
}

// BackRepoBody.CommitPhaseOneInstance commits body staged instances of Body to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBody *BackRepoBodyStruct) CommitPhaseOneInstance(body *models.Body) (Error error) {

	// check if the body is not commited yet
	if _, ok := backRepoBody.Map_BodyPtr_BodyDBID[body]; ok {
		return
	}

	// initiate body
	var bodyDB BodyDB
	bodyDB.CopyBasicFieldsFromBody(body)

	_, err := backRepoBody.db.Create(&bodyDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoBody.Map_BodyPtr_BodyDBID[body] = bodyDB.ID
	backRepoBody.Map_BodyDBID_BodyPtr[bodyDB.ID] = body
	backRepoBody.Map_BodyDBID_BodyDB[bodyDB.ID] = &bodyDB

	return
}

// BackRepoBody.CommitPhaseTwo commits all staged instances of Body to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBody *BackRepoBodyStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, body := range backRepoBody.Map_BodyDBID_BodyPtr {
		backRepoBody.CommitPhaseTwoInstance(backRepo, idx, body)
	}

	return
}

// BackRepoBody.CommitPhaseTwoInstance commits {{structname }} of models.Body to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBody *BackRepoBodyStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, body *models.Body) (Error error) {

	// fetch matching bodyDB
	if bodyDB, ok := backRepoBody.Map_BodyDBID_BodyDB[idx]; ok {

		bodyDB.CopyBasicFieldsFromBody(body)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		bodyDB.BodyPointersEncoding.Paragraphs = make([]int, 0)
		// 2. encode
		for _, paragraphAssocEnd := range body.Paragraphs {
			paragraphAssocEnd_DB :=
				backRepo.BackRepoParagraph.GetParagraphDBFromParagraphPtr(paragraphAssocEnd)
			
			// the stage might be inconsistant, meaning that the paragraphAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if paragraphAssocEnd_DB == nil {
				continue
			}
			
			bodyDB.BodyPointersEncoding.Paragraphs =
				append(bodyDB.BodyPointersEncoding.Paragraphs, int(paragraphAssocEnd_DB.ID))
		}

		// 1. reset
		bodyDB.BodyPointersEncoding.Tables = make([]int, 0)
		// 2. encode
		for _, tableAssocEnd := range body.Tables {
			tableAssocEnd_DB :=
				backRepo.BackRepoTable.GetTableDBFromTablePtr(tableAssocEnd)
			
			// the stage might be inconsistant, meaning that the tableAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if tableAssocEnd_DB == nil {
				continue
			}
			
			bodyDB.BodyPointersEncoding.Tables =
				append(bodyDB.BodyPointersEncoding.Tables, int(tableAssocEnd_DB.ID))
		}

		// commit pointer value body.LastParagraph translates to updating the body.LastParagraphID
		bodyDB.LastParagraphID.Valid = true // allow for a 0 value (nil association)
		if body.LastParagraph != nil {
			if LastParagraphId, ok := backRepo.BackRepoParagraph.Map_ParagraphPtr_ParagraphDBID[body.LastParagraph]; ok {
				bodyDB.LastParagraphID.Int64 = int64(LastParagraphId)
				bodyDB.LastParagraphID.Valid = true
			}
		} else {
			bodyDB.LastParagraphID.Int64 = 0
			bodyDB.LastParagraphID.Valid = true
		}

		_, err := backRepoBody.db.Save(&bodyDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Body intance %s", body.Name))
		return err
	}

	return
}

// BackRepoBody.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBody *BackRepoBodyStruct) CheckoutPhaseOne() (Error error) {

	bodyDBArray := make([]BodyDB, 0)
	_, err := backRepoBody.db.Find(&bodyDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bodyInstancesToBeRemovedFromTheStage := make(map[*models.Body]any)
	for key, value := range backRepoBody.stage.Bodys {
		bodyInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bodyDB := range bodyDBArray {
		backRepoBody.CheckoutPhaseOneInstance(&bodyDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		body, ok := backRepoBody.Map_BodyDBID_BodyPtr[bodyDB.ID]
		if ok {
			delete(bodyInstancesToBeRemovedFromTheStage, body)
		}
	}

	// remove from stage and back repo's 3 maps all bodys that are not in the checkout
	for body := range bodyInstancesToBeRemovedFromTheStage {
		body.Unstage(backRepoBody.GetStage())

		// remove instance from the back repo 3 maps
		bodyID := backRepoBody.Map_BodyPtr_BodyDBID[body]
		delete(backRepoBody.Map_BodyPtr_BodyDBID, body)
		delete(backRepoBody.Map_BodyDBID_BodyDB, bodyID)
		delete(backRepoBody.Map_BodyDBID_BodyPtr, bodyID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bodyDB that has been found in the DB, updates the backRepo and stages the
// models version of the bodyDB
func (backRepoBody *BackRepoBodyStruct) CheckoutPhaseOneInstance(bodyDB *BodyDB) (Error error) {

	body, ok := backRepoBody.Map_BodyDBID_BodyPtr[bodyDB.ID]
	if !ok {
		body = new(models.Body)

		backRepoBody.Map_BodyDBID_BodyPtr[bodyDB.ID] = body
		backRepoBody.Map_BodyPtr_BodyDBID[body] = bodyDB.ID

		// append model store with the new element
		body.Name = bodyDB.Name_Data.String
		body.Stage(backRepoBody.GetStage())
	}
	bodyDB.CopyBasicFieldsToBody(body)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	body.Stage(backRepoBody.GetStage())

	// preserve pointer to bodyDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BodyDBID_BodyDB)[bodyDB hold variable pointers
	bodyDB_Data := *bodyDB
	preservedPtrToBody := &bodyDB_Data
	backRepoBody.Map_BodyDBID_BodyDB[bodyDB.ID] = preservedPtrToBody

	return
}

// BackRepoBody.CheckoutPhaseTwo Checkouts all staged instances of Body to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBody *BackRepoBodyStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bodyDB := range backRepoBody.Map_BodyDBID_BodyDB {
		backRepoBody.CheckoutPhaseTwoInstance(backRepo, bodyDB)
	}
	return
}

// BackRepoBody.CheckoutPhaseTwoInstance Checkouts staged instances of Body to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBody *BackRepoBodyStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bodyDB *BodyDB) (Error error) {

	body := backRepoBody.Map_BodyDBID_BodyPtr[bodyDB.ID]

	bodyDB.DecodePointers(backRepo, body)

	return
}

func (bodyDB *BodyDB) DecodePointers(backRepo *BackRepoStruct, body *models.Body) {

	// insertion point for checkout of pointer encoding
	// This loop redeem body.Paragraphs in the stage from the encode in the back repo
	// It parses all ParagraphDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	body.Paragraphs = body.Paragraphs[:0]
	for _, _Paragraphid := range bodyDB.BodyPointersEncoding.Paragraphs {
		body.Paragraphs = append(body.Paragraphs, backRepo.BackRepoParagraph.Map_ParagraphDBID_ParagraphPtr[uint(_Paragraphid)])
	}

	// This loop redeem body.Tables in the stage from the encode in the back repo
	// It parses all TableDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	body.Tables = body.Tables[:0]
	for _, _Tableid := range bodyDB.BodyPointersEncoding.Tables {
		body.Tables = append(body.Tables, backRepo.BackRepoTable.Map_TableDBID_TablePtr[uint(_Tableid)])
	}

	// LastParagraph field
	body.LastParagraph = nil
	if bodyDB.LastParagraphID.Int64 != 0 {
		body.LastParagraph = backRepo.BackRepoParagraph.Map_ParagraphDBID_ParagraphPtr[uint(bodyDB.LastParagraphID.Int64)]
	}
	return
}

// CommitBody allows commit of a single body (if already staged)
func (backRepo *BackRepoStruct) CommitBody(body *models.Body) {
	backRepo.BackRepoBody.CommitPhaseOneInstance(body)
	if id, ok := backRepo.BackRepoBody.Map_BodyPtr_BodyDBID[body]; ok {
		backRepo.BackRepoBody.CommitPhaseTwoInstance(backRepo, id, body)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBody allows checkout of a single body (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBody(body *models.Body) {
	// check if the body is staged
	if _, ok := backRepo.BackRepoBody.Map_BodyPtr_BodyDBID[body]; ok {

		if id, ok := backRepo.BackRepoBody.Map_BodyPtr_BodyDBID[body]; ok {
			var bodyDB BodyDB
			bodyDB.ID = id

			if _, err := backRepo.BackRepoBody.db.First(&bodyDB, id); err != nil {
				log.Fatalln("CheckoutBody : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBody.CheckoutPhaseOneInstance(&bodyDB)
			backRepo.BackRepoBody.CheckoutPhaseTwoInstance(backRepo, &bodyDB)
		}
	}
}

// CopyBasicFieldsFromBody
func (bodyDB *BodyDB) CopyBasicFieldsFromBody(body *models.Body) {
	// insertion point for fields commit

	bodyDB.Name_Data.String = body.Name
	bodyDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBody_WOP
func (bodyDB *BodyDB) CopyBasicFieldsFromBody_WOP(body *models.Body_WOP) {
	// insertion point for fields commit

	bodyDB.Name_Data.String = body.Name
	bodyDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBodyWOP
func (bodyDB *BodyDB) CopyBasicFieldsFromBodyWOP(body *BodyWOP) {
	// insertion point for fields commit

	bodyDB.Name_Data.String = body.Name
	bodyDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBody
func (bodyDB *BodyDB) CopyBasicFieldsToBody(body *models.Body) {
	// insertion point for checkout of basic fields (back repo to stage)
	body.Name = bodyDB.Name_Data.String
}

// CopyBasicFieldsToBody_WOP
func (bodyDB *BodyDB) CopyBasicFieldsToBody_WOP(body *models.Body_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	body.Name = bodyDB.Name_Data.String
}

// CopyBasicFieldsToBodyWOP
func (bodyDB *BodyDB) CopyBasicFieldsToBodyWOP(body *BodyWOP) {
	body.ID = int(bodyDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	body.Name = bodyDB.Name_Data.String
}

// Backup generates a json file from a slice of all BodyDB instances in the backrepo
func (backRepoBody *BackRepoBodyStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BodyDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BodyDB, 0)
	for _, bodyDB := range backRepoBody.Map_BodyDBID_BodyDB {
		forBackup = append(forBackup, bodyDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Body ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Body file", err.Error())
	}
}

// Backup generates a json file from a slice of all BodyDB instances in the backrepo
func (backRepoBody *BackRepoBodyStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BodyDB, 0)
	for _, bodyDB := range backRepoBody.Map_BodyDBID_BodyDB {
		forBackup = append(forBackup, bodyDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Body")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Body_Fields, -1)
	for _, bodyDB := range forBackup {

		var bodyWOP BodyWOP
		bodyDB.CopyBasicFieldsToBodyWOP(&bodyWOP)

		row := sh.AddRow()
		row.WriteStruct(&bodyWOP, -1)
	}
}

// RestoreXL from the "Body" sheet all BodyDB instances
func (backRepoBody *BackRepoBodyStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBodyid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Body"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBody.rowVisitorBody)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBody *BackRepoBodyStruct) rowVisitorBody(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bodyWOP BodyWOP
		row.ReadStruct(&bodyWOP)

		// add the unmarshalled struct to the stage
		bodyDB := new(BodyDB)
		bodyDB.CopyBasicFieldsFromBodyWOP(&bodyWOP)

		bodyDB_ID_atBackupTime := bodyDB.ID
		bodyDB.ID = 0
		_, err := backRepoBody.db.Create(bodyDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBody.Map_BodyDBID_BodyDB[bodyDB.ID] = bodyDB
		BackRepoBodyid_atBckpTime_newID[bodyDB_ID_atBackupTime] = bodyDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BodyDB.json" in dirPath that stores an array
// of BodyDB and stores it in the database
// the map BackRepoBodyid_atBckpTime_newID is updated accordingly
func (backRepoBody *BackRepoBodyStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBodyid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BodyDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Body file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BodyDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BodyDBID_BodyDB
	for _, bodyDB := range forRestore {

		bodyDB_ID_atBackupTime := bodyDB.ID
		bodyDB.ID = 0
		_, err := backRepoBody.db.Create(bodyDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoBody.Map_BodyDBID_BodyDB[bodyDB.ID] = bodyDB
		BackRepoBodyid_atBckpTime_newID[bodyDB_ID_atBackupTime] = bodyDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Body file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Body>id_atBckpTime_newID
// to compute new index
func (backRepoBody *BackRepoBodyStruct) RestorePhaseTwo() {

	for _, bodyDB := range backRepoBody.Map_BodyDBID_BodyDB {

		// next line of code is to avert unused variable compilation error
		_ = bodyDB

		// insertion point for reindexing pointers encoding
		// reindexing LastParagraph field
		if bodyDB.LastParagraphID.Int64 != 0 {
			bodyDB.LastParagraphID.Int64 = int64(BackRepoParagraphid_atBckpTime_newID[uint(bodyDB.LastParagraphID.Int64)])
			bodyDB.LastParagraphID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoBody.db.Model(bodyDB)
		_, err := db.Updates(*bodyDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoBody.ResetReversePointers commits all staged instances of Body to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBody *BackRepoBodyStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, body := range backRepoBody.Map_BodyDBID_BodyPtr {
		backRepoBody.ResetReversePointersInstance(backRepo, idx, body)
	}

	return
}

func (backRepoBody *BackRepoBodyStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, body *models.Body) (Error error) {

	// fetch matching bodyDB
	if bodyDB, ok := backRepoBody.Map_BodyDBID_BodyDB[idx]; ok {
		_ = bodyDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBodyid_atBckpTime_newID map[uint]uint
