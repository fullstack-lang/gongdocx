// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdocx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TableColumn_sql sql.NullBool
var dummy_TableColumn_time time.Duration
var dummy_TableColumn_sort sort.Float64Slice

// TableColumnAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tablecolumnAPI
type TableColumnAPI struct {
	gorm.Model

	models.TableColumn

	// encoding of pointers
	TableColumnPointersEnconding
}

// TableColumnPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TableColumnPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Node is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NodeID sql.NullInt64

	// Implementation of a reverse ID for field TableRow{}.TableColumns []*TableColumn
	TableRow_TableColumnsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	TableRow_TableColumnsDBID_Index sql.NullInt64
}

// TableColumnDB describes a tablecolumn in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tablecolumnDB
type TableColumnDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tablecolumnDB.Name
	Name_Data sql.NullString

	// Declation for basic field tablecolumnDB.Content
	Content_Data sql.NullString
	// encoding of pointers
	TableColumnPointersEnconding
}

// TableColumnDBs arrays tablecolumnDBs
// swagger:response tablecolumnDBsResponse
type TableColumnDBs []TableColumnDB

// TableColumnDBResponse provides response
// swagger:response tablecolumnDBResponse
type TableColumnDBResponse struct {
	TableColumnDB
}

// TableColumnWOP is a TableColumn without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TableColumnWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var TableColumn_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
}

type BackRepoTableColumnStruct struct {
	// stores TableColumnDB according to their gorm ID
	Map_TableColumnDBID_TableColumnDB map[uint]*TableColumnDB

	// stores TableColumnDB ID according to TableColumn address
	Map_TableColumnPtr_TableColumnDBID map[*models.TableColumn]uint

	// stores TableColumn according to their gorm ID
	Map_TableColumnDBID_TableColumnPtr map[uint]*models.TableColumn

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTableColumn *BackRepoTableColumnStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTableColumn.stage
	return
}

func (backRepoTableColumn *BackRepoTableColumnStruct) GetDB() *gorm.DB {
	return backRepoTableColumn.db
}

// GetTableColumnDBFromTableColumnPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTableColumn *BackRepoTableColumnStruct) GetTableColumnDBFromTableColumnPtr(tablecolumn *models.TableColumn) (tablecolumnDB *TableColumnDB) {
	id := backRepoTableColumn.Map_TableColumnPtr_TableColumnDBID[tablecolumn]
	tablecolumnDB = backRepoTableColumn.Map_TableColumnDBID_TableColumnDB[id]
	return
}

// BackRepoTableColumn.CommitPhaseOne commits all staged instances of TableColumn to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTableColumn *BackRepoTableColumnStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for tablecolumn := range stage.TableColumns {
		backRepoTableColumn.CommitPhaseOneInstance(tablecolumn)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, tablecolumn := range backRepoTableColumn.Map_TableColumnDBID_TableColumnPtr {
		if _, ok := stage.TableColumns[tablecolumn]; !ok {
			backRepoTableColumn.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTableColumn.CommitDeleteInstance commits deletion of TableColumn to the BackRepo
func (backRepoTableColumn *BackRepoTableColumnStruct) CommitDeleteInstance(id uint) (Error error) {

	tablecolumn := backRepoTableColumn.Map_TableColumnDBID_TableColumnPtr[id]

	// tablecolumn is not staged anymore, remove tablecolumnDB
	tablecolumnDB := backRepoTableColumn.Map_TableColumnDBID_TableColumnDB[id]
	query := backRepoTableColumn.db.Unscoped().Delete(&tablecolumnDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoTableColumn.Map_TableColumnPtr_TableColumnDBID, tablecolumn)
	delete(backRepoTableColumn.Map_TableColumnDBID_TableColumnPtr, id)
	delete(backRepoTableColumn.Map_TableColumnDBID_TableColumnDB, id)

	return
}

// BackRepoTableColumn.CommitPhaseOneInstance commits tablecolumn staged instances of TableColumn to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTableColumn *BackRepoTableColumnStruct) CommitPhaseOneInstance(tablecolumn *models.TableColumn) (Error error) {

	// check if the tablecolumn is not commited yet
	if _, ok := backRepoTableColumn.Map_TableColumnPtr_TableColumnDBID[tablecolumn]; ok {
		return
	}

	// initiate tablecolumn
	var tablecolumnDB TableColumnDB
	tablecolumnDB.CopyBasicFieldsFromTableColumn(tablecolumn)

	query := backRepoTableColumn.db.Create(&tablecolumnDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoTableColumn.Map_TableColumnPtr_TableColumnDBID[tablecolumn] = tablecolumnDB.ID
	backRepoTableColumn.Map_TableColumnDBID_TableColumnPtr[tablecolumnDB.ID] = tablecolumn
	backRepoTableColumn.Map_TableColumnDBID_TableColumnDB[tablecolumnDB.ID] = &tablecolumnDB

	return
}

// BackRepoTableColumn.CommitPhaseTwo commits all staged instances of TableColumn to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableColumn *BackRepoTableColumnStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, tablecolumn := range backRepoTableColumn.Map_TableColumnDBID_TableColumnPtr {
		backRepoTableColumn.CommitPhaseTwoInstance(backRepo, idx, tablecolumn)
	}

	return
}

// BackRepoTableColumn.CommitPhaseTwoInstance commits {{structname }} of models.TableColumn to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableColumn *BackRepoTableColumnStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, tablecolumn *models.TableColumn) (Error error) {

	// fetch matching tablecolumnDB
	if tablecolumnDB, ok := backRepoTableColumn.Map_TableColumnDBID_TableColumnDB[idx]; ok {

		tablecolumnDB.CopyBasicFieldsFromTableColumn(tablecolumn)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value tablecolumn.Node translates to updating the tablecolumn.NodeID
		tablecolumnDB.NodeID.Valid = true // allow for a 0 value (nil association)
		if tablecolumn.Node != nil {
			if NodeId, ok := backRepo.BackRepoNode.Map_NodePtr_NodeDBID[tablecolumn.Node]; ok {
				tablecolumnDB.NodeID.Int64 = int64(NodeId)
				tablecolumnDB.NodeID.Valid = true
			}
		}

		// This loop encodes the slice of pointers tablecolumn.Paragraphs into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, paragraphAssocEnd := range tablecolumn.Paragraphs {

			// get the back repo instance at the association end
			paragraphAssocEnd_DB :=
				backRepo.BackRepoParagraph.GetParagraphDBFromParagraphPtr(paragraphAssocEnd)

			// encode reverse pointer in the association end back repo instance
			paragraphAssocEnd_DB.TableColumn_ParagraphsDBID.Int64 = int64(tablecolumnDB.ID)
			paragraphAssocEnd_DB.TableColumn_ParagraphsDBID.Valid = true
			paragraphAssocEnd_DB.TableColumn_ParagraphsDBID_Index.Int64 = int64(idx)
			paragraphAssocEnd_DB.TableColumn_ParagraphsDBID_Index.Valid = true
			if q := backRepoTableColumn.db.Save(paragraphAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoTableColumn.db.Save(&tablecolumnDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TableColumn intance %s", tablecolumn.Name))
		return err
	}

	return
}

// BackRepoTableColumn.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTableColumn *BackRepoTableColumnStruct) CheckoutPhaseOne() (Error error) {

	tablecolumnDBArray := make([]TableColumnDB, 0)
	query := backRepoTableColumn.db.Find(&tablecolumnDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tablecolumnInstancesToBeRemovedFromTheStage := make(map[*models.TableColumn]any)
	for key, value := range backRepoTableColumn.stage.TableColumns {
		tablecolumnInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tablecolumnDB := range tablecolumnDBArray {
		backRepoTableColumn.CheckoutPhaseOneInstance(&tablecolumnDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		tablecolumn, ok := backRepoTableColumn.Map_TableColumnDBID_TableColumnPtr[tablecolumnDB.ID]
		if ok {
			delete(tablecolumnInstancesToBeRemovedFromTheStage, tablecolumn)
		}
	}

	// remove from stage and back repo's 3 maps all tablecolumns that are not in the checkout
	for tablecolumn := range tablecolumnInstancesToBeRemovedFromTheStage {
		tablecolumn.Unstage(backRepoTableColumn.GetStage())

		// remove instance from the back repo 3 maps
		tablecolumnID := backRepoTableColumn.Map_TableColumnPtr_TableColumnDBID[tablecolumn]
		delete(backRepoTableColumn.Map_TableColumnPtr_TableColumnDBID, tablecolumn)
		delete(backRepoTableColumn.Map_TableColumnDBID_TableColumnDB, tablecolumnID)
		delete(backRepoTableColumn.Map_TableColumnDBID_TableColumnPtr, tablecolumnID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tablecolumnDB that has been found in the DB, updates the backRepo and stages the
// models version of the tablecolumnDB
func (backRepoTableColumn *BackRepoTableColumnStruct) CheckoutPhaseOneInstance(tablecolumnDB *TableColumnDB) (Error error) {

	tablecolumn, ok := backRepoTableColumn.Map_TableColumnDBID_TableColumnPtr[tablecolumnDB.ID]
	if !ok {
		tablecolumn = new(models.TableColumn)

		backRepoTableColumn.Map_TableColumnDBID_TableColumnPtr[tablecolumnDB.ID] = tablecolumn
		backRepoTableColumn.Map_TableColumnPtr_TableColumnDBID[tablecolumn] = tablecolumnDB.ID

		// append model store with the new element
		tablecolumn.Name = tablecolumnDB.Name_Data.String
		tablecolumn.Stage(backRepoTableColumn.GetStage())
	}
	tablecolumnDB.CopyBasicFieldsToTableColumn(tablecolumn)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	tablecolumn.Stage(backRepoTableColumn.GetStage())

	// preserve pointer to tablecolumnDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TableColumnDBID_TableColumnDB)[tablecolumnDB hold variable pointers
	tablecolumnDB_Data := *tablecolumnDB
	preservedPtrToTableColumn := &tablecolumnDB_Data
	backRepoTableColumn.Map_TableColumnDBID_TableColumnDB[tablecolumnDB.ID] = preservedPtrToTableColumn

	return
}

// BackRepoTableColumn.CheckoutPhaseTwo Checkouts all staged instances of TableColumn to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableColumn *BackRepoTableColumnStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tablecolumnDB := range backRepoTableColumn.Map_TableColumnDBID_TableColumnDB {
		backRepoTableColumn.CheckoutPhaseTwoInstance(backRepo, tablecolumnDB)
	}
	return
}

// BackRepoTableColumn.CheckoutPhaseTwoInstance Checkouts staged instances of TableColumn to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTableColumn *BackRepoTableColumnStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tablecolumnDB *TableColumnDB) (Error error) {

	tablecolumn := backRepoTableColumn.Map_TableColumnDBID_TableColumnPtr[tablecolumnDB.ID]
	_ = tablecolumn // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Node field
	if tablecolumnDB.NodeID.Int64 != 0 {
		tablecolumn.Node = backRepo.BackRepoNode.Map_NodeDBID_NodePtr[uint(tablecolumnDB.NodeID.Int64)]
	}
	// This loop redeem tablecolumn.Paragraphs in the stage from the encode in the back repo
	// It parses all ParagraphDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	tablecolumn.Paragraphs = tablecolumn.Paragraphs[:0]
	// 2. loop all instances in the type in the association end
	for _, paragraphDB_AssocEnd := range backRepo.BackRepoParagraph.Map_ParagraphDBID_ParagraphDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if paragraphDB_AssocEnd.TableColumn_ParagraphsDBID.Int64 == int64(tablecolumnDB.ID) {
			// 4. fetch the associated instance in the stage
			paragraph_AssocEnd := backRepo.BackRepoParagraph.Map_ParagraphDBID_ParagraphPtr[paragraphDB_AssocEnd.ID]
			// 5. append it the association slice
			tablecolumn.Paragraphs = append(tablecolumn.Paragraphs, paragraph_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(tablecolumn.Paragraphs, func(i, j int) bool {
		paragraphDB_i_ID := backRepo.BackRepoParagraph.Map_ParagraphPtr_ParagraphDBID[tablecolumn.Paragraphs[i]]
		paragraphDB_j_ID := backRepo.BackRepoParagraph.Map_ParagraphPtr_ParagraphDBID[tablecolumn.Paragraphs[j]]

		paragraphDB_i := backRepo.BackRepoParagraph.Map_ParagraphDBID_ParagraphDB[paragraphDB_i_ID]
		paragraphDB_j := backRepo.BackRepoParagraph.Map_ParagraphDBID_ParagraphDB[paragraphDB_j_ID]

		return paragraphDB_i.TableColumn_ParagraphsDBID_Index.Int64 < paragraphDB_j.TableColumn_ParagraphsDBID_Index.Int64
	})

	return
}

// CommitTableColumn allows commit of a single tablecolumn (if already staged)
func (backRepo *BackRepoStruct) CommitTableColumn(tablecolumn *models.TableColumn) {
	backRepo.BackRepoTableColumn.CommitPhaseOneInstance(tablecolumn)
	if id, ok := backRepo.BackRepoTableColumn.Map_TableColumnPtr_TableColumnDBID[tablecolumn]; ok {
		backRepo.BackRepoTableColumn.CommitPhaseTwoInstance(backRepo, id, tablecolumn)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTableColumn allows checkout of a single tablecolumn (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTableColumn(tablecolumn *models.TableColumn) {
	// check if the tablecolumn is staged
	if _, ok := backRepo.BackRepoTableColumn.Map_TableColumnPtr_TableColumnDBID[tablecolumn]; ok {

		if id, ok := backRepo.BackRepoTableColumn.Map_TableColumnPtr_TableColumnDBID[tablecolumn]; ok {
			var tablecolumnDB TableColumnDB
			tablecolumnDB.ID = id

			if err := backRepo.BackRepoTableColumn.db.First(&tablecolumnDB, id).Error; err != nil {
				log.Panicln("CheckoutTableColumn : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTableColumn.CheckoutPhaseOneInstance(&tablecolumnDB)
			backRepo.BackRepoTableColumn.CheckoutPhaseTwoInstance(backRepo, &tablecolumnDB)
		}
	}
}

// CopyBasicFieldsFromTableColumn
func (tablecolumnDB *TableColumnDB) CopyBasicFieldsFromTableColumn(tablecolumn *models.TableColumn) {
	// insertion point for fields commit

	tablecolumnDB.Name_Data.String = tablecolumn.Name
	tablecolumnDB.Name_Data.Valid = true

	tablecolumnDB.Content_Data.String = tablecolumn.Content
	tablecolumnDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromTableColumnWOP
func (tablecolumnDB *TableColumnDB) CopyBasicFieldsFromTableColumnWOP(tablecolumn *TableColumnWOP) {
	// insertion point for fields commit

	tablecolumnDB.Name_Data.String = tablecolumn.Name
	tablecolumnDB.Name_Data.Valid = true

	tablecolumnDB.Content_Data.String = tablecolumn.Content
	tablecolumnDB.Content_Data.Valid = true
}

// CopyBasicFieldsToTableColumn
func (tablecolumnDB *TableColumnDB) CopyBasicFieldsToTableColumn(tablecolumn *models.TableColumn) {
	// insertion point for checkout of basic fields (back repo to stage)
	tablecolumn.Name = tablecolumnDB.Name_Data.String
	tablecolumn.Content = tablecolumnDB.Content_Data.String
}

// CopyBasicFieldsToTableColumnWOP
func (tablecolumnDB *TableColumnDB) CopyBasicFieldsToTableColumnWOP(tablecolumn *TableColumnWOP) {
	tablecolumn.ID = int(tablecolumnDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	tablecolumn.Name = tablecolumnDB.Name_Data.String
	tablecolumn.Content = tablecolumnDB.Content_Data.String
}

// Backup generates a json file from a slice of all TableColumnDB instances in the backrepo
func (backRepoTableColumn *BackRepoTableColumnStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TableColumnDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TableColumnDB, 0)
	for _, tablecolumnDB := range backRepoTableColumn.Map_TableColumnDBID_TableColumnDB {
		forBackup = append(forBackup, tablecolumnDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json TableColumn ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json TableColumn file", err.Error())
	}
}

// Backup generates a json file from a slice of all TableColumnDB instances in the backrepo
func (backRepoTableColumn *BackRepoTableColumnStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TableColumnDB, 0)
	for _, tablecolumnDB := range backRepoTableColumn.Map_TableColumnDBID_TableColumnDB {
		forBackup = append(forBackup, tablecolumnDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TableColumn")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TableColumn_Fields, -1)
	for _, tablecolumnDB := range forBackup {

		var tablecolumnWOP TableColumnWOP
		tablecolumnDB.CopyBasicFieldsToTableColumnWOP(&tablecolumnWOP)

		row := sh.AddRow()
		row.WriteStruct(&tablecolumnWOP, -1)
	}
}

// RestoreXL from the "TableColumn" sheet all TableColumnDB instances
func (backRepoTableColumn *BackRepoTableColumnStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTableColumnid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TableColumn"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTableColumn.rowVisitorTableColumn)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoTableColumn *BackRepoTableColumnStruct) rowVisitorTableColumn(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tablecolumnWOP TableColumnWOP
		row.ReadStruct(&tablecolumnWOP)

		// add the unmarshalled struct to the stage
		tablecolumnDB := new(TableColumnDB)
		tablecolumnDB.CopyBasicFieldsFromTableColumnWOP(&tablecolumnWOP)

		tablecolumnDB_ID_atBackupTime := tablecolumnDB.ID
		tablecolumnDB.ID = 0
		query := backRepoTableColumn.db.Create(tablecolumnDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoTableColumn.Map_TableColumnDBID_TableColumnDB[tablecolumnDB.ID] = tablecolumnDB
		BackRepoTableColumnid_atBckpTime_newID[tablecolumnDB_ID_atBackupTime] = tablecolumnDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TableColumnDB.json" in dirPath that stores an array
// of TableColumnDB and stores it in the database
// the map BackRepoTableColumnid_atBckpTime_newID is updated accordingly
func (backRepoTableColumn *BackRepoTableColumnStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTableColumnid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TableColumnDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json TableColumn file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TableColumnDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TableColumnDBID_TableColumnDB
	for _, tablecolumnDB := range forRestore {

		tablecolumnDB_ID_atBackupTime := tablecolumnDB.ID
		tablecolumnDB.ID = 0
		query := backRepoTableColumn.db.Create(tablecolumnDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoTableColumn.Map_TableColumnDBID_TableColumnDB[tablecolumnDB.ID] = tablecolumnDB
		BackRepoTableColumnid_atBckpTime_newID[tablecolumnDB_ID_atBackupTime] = tablecolumnDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json TableColumn file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TableColumn>id_atBckpTime_newID
// to compute new index
func (backRepoTableColumn *BackRepoTableColumnStruct) RestorePhaseTwo() {

	for _, tablecolumnDB := range backRepoTableColumn.Map_TableColumnDBID_TableColumnDB {

		// next line of code is to avert unused variable compilation error
		_ = tablecolumnDB

		// insertion point for reindexing pointers encoding
		// reindexing Node field
		if tablecolumnDB.NodeID.Int64 != 0 {
			tablecolumnDB.NodeID.Int64 = int64(BackRepoNodeid_atBckpTime_newID[uint(tablecolumnDB.NodeID.Int64)])
			tablecolumnDB.NodeID.Valid = true
		}

		// This reindex tablecolumn.TableColumns
		if tablecolumnDB.TableRow_TableColumnsDBID.Int64 != 0 {
			tablecolumnDB.TableRow_TableColumnsDBID.Int64 =
				int64(BackRepoTableRowid_atBckpTime_newID[uint(tablecolumnDB.TableRow_TableColumnsDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoTableColumn.db.Model(tablecolumnDB).Updates(*tablecolumnDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTableColumnid_atBckpTime_newID map[uint]uint
