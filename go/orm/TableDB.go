// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongdocx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Table_sql sql.NullBool
var dummy_Table_time time.Duration
var dummy_Table_sort sort.Float64Slice

// TableAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model tableAPI
type TableAPI struct {
	gorm.Model

	models.Table

	// encoding of pointers
	TablePointersEnconding
}

// TablePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TablePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Node is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	NodeID sql.NullInt64

	// field TableProperties is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TablePropertiesID sql.NullInt64
}

// TableDB describes a table in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model tableDB
type TableDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field tableDB.Name
	Name_Data sql.NullString

	// Declation for basic field tableDB.Content
	Content_Data sql.NullString
	// encoding of pointers
	TablePointersEnconding
}

// TableDBs arrays tableDBs
// swagger:response tableDBsResponse
type TableDBs []TableDB

// TableDBResponse provides response
// swagger:response tableDBResponse
type TableDBResponse struct {
	TableDB
}

// TableWOP is a Table without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TableWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Table_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
}

type BackRepoTableStruct struct {
	// stores TableDB according to their gorm ID
	Map_TableDBID_TableDB map[uint]*TableDB

	// stores TableDB ID according to Table address
	Map_TablePtr_TableDBID map[*models.Table]uint

	// stores Table according to their gorm ID
	Map_TableDBID_TablePtr map[uint]*models.Table

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTable *BackRepoTableStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTable.stage
	return
}

func (backRepoTable *BackRepoTableStruct) GetDB() *gorm.DB {
	return backRepoTable.db
}

// GetTableDBFromTablePtr is a handy function to access the back repo instance from the stage instance
func (backRepoTable *BackRepoTableStruct) GetTableDBFromTablePtr(table *models.Table) (tableDB *TableDB) {
	id := backRepoTable.Map_TablePtr_TableDBID[table]
	tableDB = backRepoTable.Map_TableDBID_TableDB[id]
	return
}

// BackRepoTable.CommitPhaseOne commits all staged instances of Table to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTable *BackRepoTableStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for table := range stage.Tables {
		backRepoTable.CommitPhaseOneInstance(table)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, table := range backRepoTable.Map_TableDBID_TablePtr {
		if _, ok := stage.Tables[table]; !ok {
			backRepoTable.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTable.CommitDeleteInstance commits deletion of Table to the BackRepo
func (backRepoTable *BackRepoTableStruct) CommitDeleteInstance(id uint) (Error error) {

	table := backRepoTable.Map_TableDBID_TablePtr[id]

	// table is not staged anymore, remove tableDB
	tableDB := backRepoTable.Map_TableDBID_TableDB[id]
	query := backRepoTable.db.Unscoped().Delete(&tableDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoTable.Map_TablePtr_TableDBID, table)
	delete(backRepoTable.Map_TableDBID_TablePtr, id)
	delete(backRepoTable.Map_TableDBID_TableDB, id)

	return
}

// BackRepoTable.CommitPhaseOneInstance commits table staged instances of Table to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTable *BackRepoTableStruct) CommitPhaseOneInstance(table *models.Table) (Error error) {

	// check if the table is not commited yet
	if _, ok := backRepoTable.Map_TablePtr_TableDBID[table]; ok {
		return
	}

	// initiate table
	var tableDB TableDB
	tableDB.CopyBasicFieldsFromTable(table)

	query := backRepoTable.db.Create(&tableDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoTable.Map_TablePtr_TableDBID[table] = tableDB.ID
	backRepoTable.Map_TableDBID_TablePtr[tableDB.ID] = table
	backRepoTable.Map_TableDBID_TableDB[tableDB.ID] = &tableDB

	return
}

// BackRepoTable.CommitPhaseTwo commits all staged instances of Table to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTable *BackRepoTableStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, table := range backRepoTable.Map_TableDBID_TablePtr {
		backRepoTable.CommitPhaseTwoInstance(backRepo, idx, table)
	}

	return
}

// BackRepoTable.CommitPhaseTwoInstance commits {{structname }} of models.Table to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTable *BackRepoTableStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, table *models.Table) (Error error) {

	// fetch matching tableDB
	if tableDB, ok := backRepoTable.Map_TableDBID_TableDB[idx]; ok {

		tableDB.CopyBasicFieldsFromTable(table)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value table.Node translates to updating the table.NodeID
		tableDB.NodeID.Valid = true // allow for a 0 value (nil association)
		if table.Node != nil {
			if NodeId, ok := backRepo.BackRepoNode.Map_NodePtr_NodeDBID[table.Node]; ok {
				tableDB.NodeID.Int64 = int64(NodeId)
				tableDB.NodeID.Valid = true
			}
		}

		// commit pointer value table.TableProperties translates to updating the table.TablePropertiesID
		tableDB.TablePropertiesID.Valid = true // allow for a 0 value (nil association)
		if table.TableProperties != nil {
			if TablePropertiesId, ok := backRepo.BackRepoTableProperties.Map_TablePropertiesPtr_TablePropertiesDBID[table.TableProperties]; ok {
				tableDB.TablePropertiesID.Int64 = int64(TablePropertiesId)
				tableDB.TablePropertiesID.Valid = true
			}
		}

		// This loop encodes the slice of pointers table.TableRows into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, tablerowAssocEnd := range table.TableRows {

			// get the back repo instance at the association end
			tablerowAssocEnd_DB :=
				backRepo.BackRepoTableRow.GetTableRowDBFromTableRowPtr(tablerowAssocEnd)

			// encode reverse pointer in the association end back repo instance
			tablerowAssocEnd_DB.Table_TableRowsDBID.Int64 = int64(tableDB.ID)
			tablerowAssocEnd_DB.Table_TableRowsDBID.Valid = true
			tablerowAssocEnd_DB.Table_TableRowsDBID_Index.Int64 = int64(idx)
			tablerowAssocEnd_DB.Table_TableRowsDBID_Index.Valid = true
			if q := backRepoTable.db.Save(tablerowAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoTable.db.Save(&tableDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Table intance %s", table.Name))
		return err
	}

	return
}

// BackRepoTable.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTable *BackRepoTableStruct) CheckoutPhaseOne() (Error error) {

	tableDBArray := make([]TableDB, 0)
	query := backRepoTable.db.Find(&tableDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	tableInstancesToBeRemovedFromTheStage := make(map[*models.Table]any)
	for key, value := range backRepoTable.stage.Tables {
		tableInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, tableDB := range tableDBArray {
		backRepoTable.CheckoutPhaseOneInstance(&tableDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		table, ok := backRepoTable.Map_TableDBID_TablePtr[tableDB.ID]
		if ok {
			delete(tableInstancesToBeRemovedFromTheStage, table)
		}
	}

	// remove from stage and back repo's 3 maps all tables that are not in the checkout
	for table := range tableInstancesToBeRemovedFromTheStage {
		table.Unstage(backRepoTable.GetStage())

		// remove instance from the back repo 3 maps
		tableID := backRepoTable.Map_TablePtr_TableDBID[table]
		delete(backRepoTable.Map_TablePtr_TableDBID, table)
		delete(backRepoTable.Map_TableDBID_TableDB, tableID)
		delete(backRepoTable.Map_TableDBID_TablePtr, tableID)
	}

	return
}

// CheckoutPhaseOneInstance takes a tableDB that has been found in the DB, updates the backRepo and stages the
// models version of the tableDB
func (backRepoTable *BackRepoTableStruct) CheckoutPhaseOneInstance(tableDB *TableDB) (Error error) {

	table, ok := backRepoTable.Map_TableDBID_TablePtr[tableDB.ID]
	if !ok {
		table = new(models.Table)

		backRepoTable.Map_TableDBID_TablePtr[tableDB.ID] = table
		backRepoTable.Map_TablePtr_TableDBID[table] = tableDB.ID

		// append model store with the new element
		table.Name = tableDB.Name_Data.String
		table.Stage(backRepoTable.GetStage())
	}
	tableDB.CopyBasicFieldsToTable(table)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	table.Stage(backRepoTable.GetStage())

	// preserve pointer to tableDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TableDBID_TableDB)[tableDB hold variable pointers
	tableDB_Data := *tableDB
	preservedPtrToTable := &tableDB_Data
	backRepoTable.Map_TableDBID_TableDB[tableDB.ID] = preservedPtrToTable

	return
}

// BackRepoTable.CheckoutPhaseTwo Checkouts all staged instances of Table to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTable *BackRepoTableStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, tableDB := range backRepoTable.Map_TableDBID_TableDB {
		backRepoTable.CheckoutPhaseTwoInstance(backRepo, tableDB)
	}
	return
}

// BackRepoTable.CheckoutPhaseTwoInstance Checkouts staged instances of Table to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTable *BackRepoTableStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, tableDB *TableDB) (Error error) {

	table := backRepoTable.Map_TableDBID_TablePtr[tableDB.ID]
	_ = table // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Node field
	if tableDB.NodeID.Int64 != 0 {
		table.Node = backRepo.BackRepoNode.Map_NodeDBID_NodePtr[uint(tableDB.NodeID.Int64)]
	}
	// TableProperties field
	if tableDB.TablePropertiesID.Int64 != 0 {
		table.TableProperties = backRepo.BackRepoTableProperties.Map_TablePropertiesDBID_TablePropertiesPtr[uint(tableDB.TablePropertiesID.Int64)]
	}
	// This loop redeem table.TableRows in the stage from the encode in the back repo
	// It parses all TableRowDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	table.TableRows = table.TableRows[:0]
	// 2. loop all instances in the type in the association end
	for _, tablerowDB_AssocEnd := range backRepo.BackRepoTableRow.Map_TableRowDBID_TableRowDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if tablerowDB_AssocEnd.Table_TableRowsDBID.Int64 == int64(tableDB.ID) {
			// 4. fetch the associated instance in the stage
			tablerow_AssocEnd := backRepo.BackRepoTableRow.Map_TableRowDBID_TableRowPtr[tablerowDB_AssocEnd.ID]
			// 5. append it the association slice
			table.TableRows = append(table.TableRows, tablerow_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(table.TableRows, func(i, j int) bool {
		tablerowDB_i_ID := backRepo.BackRepoTableRow.Map_TableRowPtr_TableRowDBID[table.TableRows[i]]
		tablerowDB_j_ID := backRepo.BackRepoTableRow.Map_TableRowPtr_TableRowDBID[table.TableRows[j]]

		tablerowDB_i := backRepo.BackRepoTableRow.Map_TableRowDBID_TableRowDB[tablerowDB_i_ID]
		tablerowDB_j := backRepo.BackRepoTableRow.Map_TableRowDBID_TableRowDB[tablerowDB_j_ID]

		return tablerowDB_i.Table_TableRowsDBID_Index.Int64 < tablerowDB_j.Table_TableRowsDBID_Index.Int64
	})

	return
}

// CommitTable allows commit of a single table (if already staged)
func (backRepo *BackRepoStruct) CommitTable(table *models.Table) {
	backRepo.BackRepoTable.CommitPhaseOneInstance(table)
	if id, ok := backRepo.BackRepoTable.Map_TablePtr_TableDBID[table]; ok {
		backRepo.BackRepoTable.CommitPhaseTwoInstance(backRepo, id, table)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTable allows checkout of a single table (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTable(table *models.Table) {
	// check if the table is staged
	if _, ok := backRepo.BackRepoTable.Map_TablePtr_TableDBID[table]; ok {

		if id, ok := backRepo.BackRepoTable.Map_TablePtr_TableDBID[table]; ok {
			var tableDB TableDB
			tableDB.ID = id

			if err := backRepo.BackRepoTable.db.First(&tableDB, id).Error; err != nil {
				log.Panicln("CheckoutTable : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTable.CheckoutPhaseOneInstance(&tableDB)
			backRepo.BackRepoTable.CheckoutPhaseTwoInstance(backRepo, &tableDB)
		}
	}
}

// CopyBasicFieldsFromTable
func (tableDB *TableDB) CopyBasicFieldsFromTable(table *models.Table) {
	// insertion point for fields commit

	tableDB.Name_Data.String = table.Name
	tableDB.Name_Data.Valid = true

	tableDB.Content_Data.String = table.Content
	tableDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromTableWOP
func (tableDB *TableDB) CopyBasicFieldsFromTableWOP(table *TableWOP) {
	// insertion point for fields commit

	tableDB.Name_Data.String = table.Name
	tableDB.Name_Data.Valid = true

	tableDB.Content_Data.String = table.Content
	tableDB.Content_Data.Valid = true
}

// CopyBasicFieldsToTable
func (tableDB *TableDB) CopyBasicFieldsToTable(table *models.Table) {
	// insertion point for checkout of basic fields (back repo to stage)
	table.Name = tableDB.Name_Data.String
	table.Content = tableDB.Content_Data.String
}

// CopyBasicFieldsToTableWOP
func (tableDB *TableDB) CopyBasicFieldsToTableWOP(table *TableWOP) {
	table.ID = int(tableDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	table.Name = tableDB.Name_Data.String
	table.Content = tableDB.Content_Data.String
}

// Backup generates a json file from a slice of all TableDB instances in the backrepo
func (backRepoTable *BackRepoTableStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TableDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TableDB, 0)
	for _, tableDB := range backRepoTable.Map_TableDBID_TableDB {
		forBackup = append(forBackup, tableDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Table ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Table file", err.Error())
	}
}

// Backup generates a json file from a slice of all TableDB instances in the backrepo
func (backRepoTable *BackRepoTableStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TableDB, 0)
	for _, tableDB := range backRepoTable.Map_TableDBID_TableDB {
		forBackup = append(forBackup, tableDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Table")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Table_Fields, -1)
	for _, tableDB := range forBackup {

		var tableWOP TableWOP
		tableDB.CopyBasicFieldsToTableWOP(&tableWOP)

		row := sh.AddRow()
		row.WriteStruct(&tableWOP, -1)
	}
}

// RestoreXL from the "Table" sheet all TableDB instances
func (backRepoTable *BackRepoTableStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTableid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Table"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTable.rowVisitorTable)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoTable *BackRepoTableStruct) rowVisitorTable(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var tableWOP TableWOP
		row.ReadStruct(&tableWOP)

		// add the unmarshalled struct to the stage
		tableDB := new(TableDB)
		tableDB.CopyBasicFieldsFromTableWOP(&tableWOP)

		tableDB_ID_atBackupTime := tableDB.ID
		tableDB.ID = 0
		query := backRepoTable.db.Create(tableDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoTable.Map_TableDBID_TableDB[tableDB.ID] = tableDB
		BackRepoTableid_atBckpTime_newID[tableDB_ID_atBackupTime] = tableDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TableDB.json" in dirPath that stores an array
// of TableDB and stores it in the database
// the map BackRepoTableid_atBckpTime_newID is updated accordingly
func (backRepoTable *BackRepoTableStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTableid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TableDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Table file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TableDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TableDBID_TableDB
	for _, tableDB := range forRestore {

		tableDB_ID_atBackupTime := tableDB.ID
		tableDB.ID = 0
		query := backRepoTable.db.Create(tableDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoTable.Map_TableDBID_TableDB[tableDB.ID] = tableDB
		BackRepoTableid_atBckpTime_newID[tableDB_ID_atBackupTime] = tableDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Table file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Table>id_atBckpTime_newID
// to compute new index
func (backRepoTable *BackRepoTableStruct) RestorePhaseTwo() {

	for _, tableDB := range backRepoTable.Map_TableDBID_TableDB {

		// next line of code is to avert unused variable compilation error
		_ = tableDB

		// insertion point for reindexing pointers encoding
		// reindexing Node field
		if tableDB.NodeID.Int64 != 0 {
			tableDB.NodeID.Int64 = int64(BackRepoNodeid_atBckpTime_newID[uint(tableDB.NodeID.Int64)])
			tableDB.NodeID.Valid = true
		}

		// reindexing TableProperties field
		if tableDB.TablePropertiesID.Int64 != 0 {
			tableDB.TablePropertiesID.Int64 = int64(BackRepoTablePropertiesid_atBckpTime_newID[uint(tableDB.TablePropertiesID.Int64)])
			tableDB.TablePropertiesID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoTable.db.Model(tableDB).Updates(*tableDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTableid_atBckpTime_newID map[uint]uint
