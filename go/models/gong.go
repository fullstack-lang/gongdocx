// generated by ModelGongFileTemplate
package models

import (
	"errors"
	"fmt"
	"sync"
)

// errUnkownEnum is returns when a value cannot match enum values
var errUnkownEnum = errors.New("unkown enum")

// needed to avoid when fmt package is not needed by generated code
var __dummy__fmt_variable fmt.Scanner

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Documents           map[*Document]any
	Documents_mapString map[string]*Document

	OnAfterDocumentCreateCallback OnAfterCreateInterface[Document]
	OnAfterDocumentUpdateCallback OnAfterUpdateInterface[Document]
	OnAfterDocumentDeleteCallback OnAfterDeleteInterface[Document]
	OnAfterDocumentReadCallback   OnAfterReadInterface[Document]

	Docxs           map[*Docx]any
	Docxs_mapString map[string]*Docx

	OnAfterDocxCreateCallback OnAfterCreateInterface[Docx]
	OnAfterDocxUpdateCallback OnAfterUpdateInterface[Docx]
	OnAfterDocxDeleteCallback OnAfterDeleteInterface[Docx]
	OnAfterDocxReadCallback   OnAfterReadInterface[Docx]

	Files           map[*File]any
	Files_mapString map[string]*File

	OnAfterFileCreateCallback OnAfterCreateInterface[File]
	OnAfterFileUpdateCallback OnAfterUpdateInterface[File]
	OnAfterFileDeleteCallback OnAfterDeleteInterface[File]
	OnAfterFileReadCallback   OnAfterReadInterface[File]

	Nodes           map[*Node]any
	Nodes_mapString map[string]*Node

	OnAfterNodeCreateCallback OnAfterCreateInterface[Node]
	OnAfterNodeUpdateCallback OnAfterUpdateInterface[Node]
	OnAfterNodeDeleteCallback OnAfterDeleteInterface[Node]
	OnAfterNodeReadCallback   OnAfterReadInterface[Node]

	Paragraphs           map[*Paragraph]any
	Paragraphs_mapString map[string]*Paragraph

	OnAfterParagraphCreateCallback OnAfterCreateInterface[Paragraph]
	OnAfterParagraphUpdateCallback OnAfterUpdateInterface[Paragraph]
	OnAfterParagraphDeleteCallback OnAfterDeleteInterface[Paragraph]
	OnAfterParagraphReadCallback   OnAfterReadInterface[Paragraph]

	Runes           map[*Rune]any
	Runes_mapString map[string]*Rune

	OnAfterRuneCreateCallback OnAfterCreateInterface[Rune]
	OnAfterRuneUpdateCallback OnAfterUpdateInterface[Rune]
	OnAfterRuneDeleteCallback OnAfterDeleteInterface[Rune]
	OnAfterRuneReadCallback   OnAfterReadInterface[Rune]

	Texts           map[*Text]any
	Texts_mapString map[string]*Text

	OnAfterTextCreateCallback OnAfterCreateInterface[Text]
	OnAfterTextUpdateCallback OnAfterUpdateInterface[Text]
	OnAfterTextDeleteCallback OnAfterDeleteInterface[Text]
	OnAfterTextReadCallback   OnAfterReadInterface[Text]

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int

	// store meta package import
	MetaPackageImportPath  string
	MetaPackageImportAlias string

	// to be removed after fix of [issue](https://github.com/golang/go/issues/57559)
	// map to enable docLink renaming when an identifier is renamed
	Map_DocLink_Renaming map[string]GONG__Identifier
	// the to be removed stops here
}

type GONG__Identifier struct {
	Ident string
	Type  GONG__ExpressionType
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

// OnAfterCreateInterface callback when an instance is updated from the front
type OnAfterCreateInterface[Type Gongstruct] interface {
	OnAfterCreate(stage *StageStruct,
		instance *Type)
}

// OnAfterReadInterface callback when an instance is updated from the front
type OnAfterReadInterface[Type Gongstruct] interface {
	OnAfterRead(stage *StageStruct,
		instance *Type)
}

// OnAfterUpdateInterface callback when an instance is updated from the front
type OnAfterUpdateInterface[Type Gongstruct] interface {
	OnAfterUpdate(stage *StageStruct, old, new *Type)
}

// OnAfterDeleteInterface callback when an instance is updated from the front
type OnAfterDeleteInterface[Type Gongstruct] interface {
	OnAfterDelete(stage *StageStruct,
		staged, front *Type)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitDocument(document *Document)
	CheckoutDocument(document *Document)
	CommitDocx(docx *Docx)
	CheckoutDocx(docx *Docx)
	CommitFile(file *File)
	CheckoutFile(file *File)
	CommitNode(node *Node)
	CheckoutNode(node *Node)
	CommitParagraph(paragraph *Paragraph)
	CheckoutParagraph(paragraph *Paragraph)
	CommitRune(rune *Rune)
	CheckoutRune(rune *Rune)
	CommitText(text *Text)
	CheckoutText(text *Text)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

var _stage *StageStruct

var once sync.Once

func GetDefaultStage() *StageStruct {
	once.Do(func() {
		_stage = NewStage()
	})
	return _stage
}

func NewStage() (stage *StageStruct) {

	stage = &StageStruct{ // insertion point for array initiatialisation
		Documents:           make(map[*Document]any),
		Documents_mapString: make(map[string]*Document),

		Docxs:           make(map[*Docx]any),
		Docxs_mapString: make(map[string]*Docx),

		Files:           make(map[*File]any),
		Files_mapString: make(map[string]*File),

		Nodes:           make(map[*Node]any),
		Nodes_mapString: make(map[string]*Node),

		Paragraphs:           make(map[*Paragraph]any),
		Paragraphs_mapString: make(map[string]*Paragraph),

		Runes:           make(map[*Rune]any),
		Runes_mapString: make(map[string]*Rune),

		Texts:           make(map[*Text]any),
		Texts_mapString: make(map[string]*Text),

		// end of insertion point
		Map_GongStructName_InstancesNb: make(map[string]int),

		// to be removed after fix of [issue](https://github.com/golang/go/issues/57559)
		Map_DocLink_Renaming: make(map[string]GONG__Identifier),
		// the to be removed stops here
	}

	return
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Document"] = len(stage.Documents)
	stage.Map_GongStructName_InstancesNb["Docx"] = len(stage.Docxs)
	stage.Map_GongStructName_InstancesNb["File"] = len(stage.Files)
	stage.Map_GongStructName_InstancesNb["Node"] = len(stage.Nodes)
	stage.Map_GongStructName_InstancesNb["Paragraph"] = len(stage.Paragraphs)
	stage.Map_GongStructName_InstancesNb["Rune"] = len(stage.Runes)
	stage.Map_GongStructName_InstancesNb["Text"] = len(stage.Texts)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Document"] = len(stage.Documents)
	stage.Map_GongStructName_InstancesNb["Docx"] = len(stage.Docxs)
	stage.Map_GongStructName_InstancesNb["File"] = len(stage.Files)
	stage.Map_GongStructName_InstancesNb["Node"] = len(stage.Nodes)
	stage.Map_GongStructName_InstancesNb["Paragraph"] = len(stage.Paragraphs)
	stage.Map_GongStructName_InstancesNb["Rune"] = len(stage.Runes)
	stage.Map_GongStructName_InstancesNb["Text"] = len(stage.Texts)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts document to the model stage
func (document *Document) Stage(stage *StageStruct) *Document {
	stage.Documents[document] = __member
	stage.Documents_mapString[document.Name] = document

	return document
}

// Unstage removes document off the model stage
func (document *Document) Unstage(stage *StageStruct) *Document {
	delete(stage.Documents, document)
	delete(stage.Documents_mapString, document.Name)
	return document
}

// commit document to the back repo (if it is already staged)
func (document *Document) Commit(stage *StageStruct) *Document {
	if _, ok := stage.Documents[document]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitDocument(document)
		}
	}
	return document
}

// Checkout document to the back repo (if it is already staged)
func (document *Document) Checkout(stage *StageStruct) *Document {
	if _, ok := stage.Documents[document]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutDocument(document)
		}
	}
	return document
}

// for satisfaction of GongStruct interface
func (document *Document) GetName() (res string) {
	return document.Name
}

// Stage puts docx to the model stage
func (docx *Docx) Stage(stage *StageStruct) *Docx {
	stage.Docxs[docx] = __member
	stage.Docxs_mapString[docx.Name] = docx

	return docx
}

// Unstage removes docx off the model stage
func (docx *Docx) Unstage(stage *StageStruct) *Docx {
	delete(stage.Docxs, docx)
	delete(stage.Docxs_mapString, docx.Name)
	return docx
}

// commit docx to the back repo (if it is already staged)
func (docx *Docx) Commit(stage *StageStruct) *Docx {
	if _, ok := stage.Docxs[docx]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitDocx(docx)
		}
	}
	return docx
}

// Checkout docx to the back repo (if it is already staged)
func (docx *Docx) Checkout(stage *StageStruct) *Docx {
	if _, ok := stage.Docxs[docx]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutDocx(docx)
		}
	}
	return docx
}

// for satisfaction of GongStruct interface
func (docx *Docx) GetName() (res string) {
	return docx.Name
}

// Stage puts file to the model stage
func (file *File) Stage(stage *StageStruct) *File {
	stage.Files[file] = __member
	stage.Files_mapString[file.Name] = file

	return file
}

// Unstage removes file off the model stage
func (file *File) Unstage(stage *StageStruct) *File {
	delete(stage.Files, file)
	delete(stage.Files_mapString, file.Name)
	return file
}

// commit file to the back repo (if it is already staged)
func (file *File) Commit(stage *StageStruct) *File {
	if _, ok := stage.Files[file]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitFile(file)
		}
	}
	return file
}

// Checkout file to the back repo (if it is already staged)
func (file *File) Checkout(stage *StageStruct) *File {
	if _, ok := stage.Files[file]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutFile(file)
		}
	}
	return file
}

// for satisfaction of GongStruct interface
func (file *File) GetName() (res string) {
	return file.Name
}

// Stage puts node to the model stage
func (node *Node) Stage(stage *StageStruct) *Node {
	stage.Nodes[node] = __member
	stage.Nodes_mapString[node.Name] = node

	return node
}

// Unstage removes node off the model stage
func (node *Node) Unstage(stage *StageStruct) *Node {
	delete(stage.Nodes, node)
	delete(stage.Nodes_mapString, node.Name)
	return node
}

// commit node to the back repo (if it is already staged)
func (node *Node) Commit(stage *StageStruct) *Node {
	if _, ok := stage.Nodes[node]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitNode(node)
		}
	}
	return node
}

// Checkout node to the back repo (if it is already staged)
func (node *Node) Checkout(stage *StageStruct) *Node {
	if _, ok := stage.Nodes[node]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutNode(node)
		}
	}
	return node
}

// for satisfaction of GongStruct interface
func (node *Node) GetName() (res string) {
	return node.Name
}

// Stage puts paragraph to the model stage
func (paragraph *Paragraph) Stage(stage *StageStruct) *Paragraph {
	stage.Paragraphs[paragraph] = __member
	stage.Paragraphs_mapString[paragraph.Name] = paragraph

	return paragraph
}

// Unstage removes paragraph off the model stage
func (paragraph *Paragraph) Unstage(stage *StageStruct) *Paragraph {
	delete(stage.Paragraphs, paragraph)
	delete(stage.Paragraphs_mapString, paragraph.Name)
	return paragraph
}

// commit paragraph to the back repo (if it is already staged)
func (paragraph *Paragraph) Commit(stage *StageStruct) *Paragraph {
	if _, ok := stage.Paragraphs[paragraph]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitParagraph(paragraph)
		}
	}
	return paragraph
}

// Checkout paragraph to the back repo (if it is already staged)
func (paragraph *Paragraph) Checkout(stage *StageStruct) *Paragraph {
	if _, ok := stage.Paragraphs[paragraph]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutParagraph(paragraph)
		}
	}
	return paragraph
}

// for satisfaction of GongStruct interface
func (paragraph *Paragraph) GetName() (res string) {
	return paragraph.Name
}

// Stage puts rune to the model stage
func (rune *Rune) Stage(stage *StageStruct) *Rune {
	stage.Runes[rune] = __member
	stage.Runes_mapString[rune.Name] = rune

	return rune
}

// Unstage removes rune off the model stage
func (rune *Rune) Unstage(stage *StageStruct) *Rune {
	delete(stage.Runes, rune)
	delete(stage.Runes_mapString, rune.Name)
	return rune
}

// commit rune to the back repo (if it is already staged)
func (rune *Rune) Commit(stage *StageStruct) *Rune {
	if _, ok := stage.Runes[rune]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitRune(rune)
		}
	}
	return rune
}

// Checkout rune to the back repo (if it is already staged)
func (rune *Rune) Checkout(stage *StageStruct) *Rune {
	if _, ok := stage.Runes[rune]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutRune(rune)
		}
	}
	return rune
}

// for satisfaction of GongStruct interface
func (rune *Rune) GetName() (res string) {
	return rune.Name
}

// Stage puts text to the model stage
func (text *Text) Stage(stage *StageStruct) *Text {
	stage.Texts[text] = __member
	stage.Texts_mapString[text.Name] = text

	return text
}

// Unstage removes text off the model stage
func (text *Text) Unstage(stage *StageStruct) *Text {
	delete(stage.Texts, text)
	delete(stage.Texts_mapString, text.Name)
	return text
}

// commit text to the back repo (if it is already staged)
func (text *Text) Commit(stage *StageStruct) *Text {
	if _, ok := stage.Texts[text]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitText(text)
		}
	}
	return text
}

// Checkout text to the back repo (if it is already staged)
func (text *Text) Checkout(stage *StageStruct) *Text {
	if _, ok := stage.Texts[text]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutText(text)
		}
	}
	return text
}

// for satisfaction of GongStruct interface
func (text *Text) GetName() (res string) {
	return text.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMDocument(Document *Document)
	CreateORMDocx(Docx *Docx)
	CreateORMFile(File *File)
	CreateORMNode(Node *Node)
	CreateORMParagraph(Paragraph *Paragraph)
	CreateORMRune(Rune *Rune)
	CreateORMText(Text *Text)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMDocument(Document *Document)
	DeleteORMDocx(Docx *Docx)
	DeleteORMFile(File *File)
	DeleteORMNode(Node *Node)
	DeleteORMParagraph(Paragraph *Paragraph)
	DeleteORMRune(Rune *Rune)
	DeleteORMText(Text *Text)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Documents = make(map[*Document]any)
	stage.Documents_mapString = make(map[string]*Document)

	stage.Docxs = make(map[*Docx]any)
	stage.Docxs_mapString = make(map[string]*Docx)

	stage.Files = make(map[*File]any)
	stage.Files_mapString = make(map[string]*File)

	stage.Nodes = make(map[*Node]any)
	stage.Nodes_mapString = make(map[string]*Node)

	stage.Paragraphs = make(map[*Paragraph]any)
	stage.Paragraphs_mapString = make(map[string]*Paragraph)

	stage.Runes = make(map[*Rune]any)
	stage.Runes_mapString = make(map[string]*Rune)

	stage.Texts = make(map[*Text]any)
	stage.Texts_mapString = make(map[string]*Text)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Documents = nil
	stage.Documents_mapString = nil

	stage.Docxs = nil
	stage.Docxs_mapString = nil

	stage.Files = nil
	stage.Files_mapString = nil

	stage.Nodes = nil
	stage.Nodes_mapString = nil

	stage.Paragraphs = nil
	stage.Paragraphs_mapString = nil

	stage.Runes = nil
	stage.Runes_mapString = nil

	stage.Texts = nil
	stage.Texts_mapString = nil

}

func (stage *StageStruct) Unstage() { // insertion point for array nil
	for document := range stage.Documents {
		document.Unstage(stage)
	}

	for docx := range stage.Docxs {
		docx.Unstage(stage)
	}

	for file := range stage.Files {
		file.Unstage(stage)
	}

	for node := range stage.Nodes {
		node.Unstage(stage)
	}

	for paragraph := range stage.Paragraphs {
		paragraph.Unstage(stage)
	}

	for rune := range stage.Runes {
		rune.Unstage(stage)
	}

	for text := range stage.Texts {
		text.Unstage(stage)
	}

}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	Document | Docx | File | Node | Paragraph | Rune | Text
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*Document | *Docx | *File | *Node | *Paragraph | *Rune | *Text
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*Document]any |
		map[*Docx]any |
		map[*File]any |
		map[*Node]any |
		map[*Paragraph]any |
		map[*Rune]any |
		map[*Text]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*Document |
		map[string]*Docx |
		map[string]*File |
		map[string]*Node |
		map[string]*Paragraph |
		map[string]*Rune |
		map[string]*Text |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet](stage *StageStruct) *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*Document]any:
		return any(&stage.Documents).(*Type)
	case map[*Docx]any:
		return any(&stage.Docxs).(*Type)
	case map[*File]any:
		return any(&stage.Files).(*Type)
	case map[*Node]any:
		return any(&stage.Nodes).(*Type)
	case map[*Paragraph]any:
		return any(&stage.Paragraphs).(*Type)
	case map[*Rune]any:
		return any(&stage.Runes).(*Type)
	case map[*Text]any:
		return any(&stage.Texts).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString](stage *StageStruct) *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*Document:
		return any(&stage.Documents_mapString).(*Type)
	case map[string]*Docx:
		return any(&stage.Docxs_mapString).(*Type)
	case map[string]*File:
		return any(&stage.Files_mapString).(*Type)
	case map[string]*Node:
		return any(&stage.Nodes_mapString).(*Type)
	case map[string]*Paragraph:
		return any(&stage.Paragraphs_mapString).(*Type)
	case map[string]*Rune:
		return any(&stage.Runes_mapString).(*Type)
	case map[string]*Text:
		return any(&stage.Texts_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct](stage *StageStruct) *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Document:
		return any(&stage.Documents).(*map[*Type]any)
	case Docx:
		return any(&stage.Docxs).(*map[*Type]any)
	case File:
		return any(&stage.Files).(*map[*Type]any)
	case Node:
		return any(&stage.Nodes).(*map[*Type]any)
	case Paragraph:
		return any(&stage.Paragraphs).(*map[*Type]any)
	case Rune:
		return any(&stage.Runes).(*map[*Type]any)
	case Text:
		return any(&stage.Texts).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct](stage *StageStruct) *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Document:
		return any(&stage.Documents_mapString).(*map[string]*Type)
	case Docx:
		return any(&stage.Docxs_mapString).(*map[string]*Type)
	case File:
		return any(&stage.Files_mapString).(*map[string]*Type)
	case Node:
		return any(&stage.Nodes_mapString).(*map[string]*Type)
	case Paragraph:
		return any(&stage.Paragraphs_mapString).(*map[string]*Type)
	case Rune:
		return any(&stage.Runes_mapString).(*map[string]*Type)
	case Text:
		return any(&stage.Texts_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case Document:
		return any(&Document{
			// Initialisation of associations
			// field is initialized with an instance of File with the name of the field
			File: &File{Name: "File"},
			// field is initialized with an instance of Node with the name of the field
			Root: &Node{Name: "Root"},
		}).(*Type)
	case Docx:
		return any(&Docx{
			// Initialisation of associations
			// field is initialized with an instance of File with the name of the field
			Files: []*File{{Name: "Files"}},
		}).(*Type)
	case File:
		return any(&File{
			// Initialisation of associations
		}).(*Type)
	case Node:
		return any(&Node{
			// Initialisation of associations
			// field is initialized with an instance of Node with the name of the field
			Nodes: []*Node{{Name: "Nodes"}},
		}).(*Type)
	case Paragraph:
		return any(&Paragraph{
			// Initialisation of associations
			// field is initialized with an instance of Node with the name of the field
			Node: &Node{Name: "Node"},
		}).(*Type)
	case Rune:
		return any(&Rune{
			// Initialisation of associations
			// field is initialized with an instance of Node with the name of the field
			Node: &Node{Name: "Node"},
		}).(*Type)
	case Text:
		return any(&Text{
			// Initialisation of associations
			// field is initialized with an instance of Node with the name of the field
			Node: &Node{Name: "Node"},
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string, stage *StageStruct) map[*End][]*Start {

	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Document
	case Document:
		switch fieldname {
		// insertion point for per direct association field
		case "File":
			res := make(map[*File][]*Document)
			for document := range stage.Documents {
				if document.File != nil {
					file_ := document.File
					var documents []*Document
					_, ok := res[file_]
					if ok {
						documents = res[file_]
					} else {
						documents = make([]*Document, 0)
					}
					documents = append(documents, document)
					res[file_] = documents
				}
			}
			return any(res).(map[*End][]*Start)
		case "Root":
			res := make(map[*Node][]*Document)
			for document := range stage.Documents {
				if document.Root != nil {
					node_ := document.Root
					var documents []*Document
					_, ok := res[node_]
					if ok {
						documents = res[node_]
					} else {
						documents = make([]*Document, 0)
					}
					documents = append(documents, document)
					res[node_] = documents
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of Docx
	case Docx:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of File
	case File:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Node
	case Node:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Paragraph
	case Paragraph:
		switch fieldname {
		// insertion point for per direct association field
		case "Node":
			res := make(map[*Node][]*Paragraph)
			for paragraph := range stage.Paragraphs {
				if paragraph.Node != nil {
					node_ := paragraph.Node
					var paragraphs []*Paragraph
					_, ok := res[node_]
					if ok {
						paragraphs = res[node_]
					} else {
						paragraphs = make([]*Paragraph, 0)
					}
					paragraphs = append(paragraphs, paragraph)
					res[node_] = paragraphs
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of Rune
	case Rune:
		switch fieldname {
		// insertion point for per direct association field
		case "Node":
			res := make(map[*Node][]*Rune)
			for rune := range stage.Runes {
				if rune.Node != nil {
					node_ := rune.Node
					var runes []*Rune
					_, ok := res[node_]
					if ok {
						runes = res[node_]
					} else {
						runes = make([]*Rune, 0)
					}
					runes = append(runes, rune)
					res[node_] = runes
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of Text
	case Text:
		switch fieldname {
		// insertion point for per direct association field
		case "Node":
			res := make(map[*Node][]*Text)
			for text := range stage.Texts {
				if text.Node != nil {
					node_ := text.Node
					var texts []*Text
					_, ok := res[node_]
					if ok {
						texts = res[node_]
					} else {
						texts = make([]*Text, 0)
					}
					texts = append(texts, text)
					res[node_] = texts
				}
			}
			return any(res).(map[*End][]*Start)
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string, stage *StageStruct) map[*End]*Start {

	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Document
	case Document:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Docx
	case Docx:
		switch fieldname {
		// insertion point for per direct association field
		case "Files":
			res := make(map[*File]*Docx)
			for docx := range stage.Docxs {
				for _, file_ := range docx.Files {
					res[file_] = docx
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of File
	case File:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Node
	case Node:
		switch fieldname {
		// insertion point for per direct association field
		case "Nodes":
			res := make(map[*Node]*Node)
			for node := range stage.Nodes {
				for _, node_ := range node.Nodes {
					res[node_] = node
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of Paragraph
	case Paragraph:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Rune
	case Rune:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Text
	case Text:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Document:
		res = "Document"
	case Docx:
		res = "Docx"
	case File:
		res = "File"
	case Node:
		res = "Node"
	case Paragraph:
		res = "Paragraph"
	case Rune:
		res = "Rune"
	case Text:
		res = "Text"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Document:
		res = []string{"Name", "File", "Root"}
	case Docx:
		res = []string{"Name", "Files"}
	case File:
		res = []string{"Name"}
	case Node:
		res = []string{"Name", "Nodes"}
	case Paragraph:
		res = []string{"Name", "Node"}
	case Rune:
		res = []string{"Name", "Node"}
	case Text:
		res = []string{"Name", "Content", "Node"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case Document:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Document).Name
		case "File":
			if any(instance).(Document).File != nil {
				res = any(instance).(Document).File.Name
			}
		case "Root":
			if any(instance).(Document).Root != nil {
				res = any(instance).(Document).Root.Name
			}
		}
	case Docx:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Docx).Name
		case "Files":
			for idx, __instance__ := range any(instance).(Docx).Files {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case File:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(File).Name
		}
	case Node:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Node).Name
		case "Nodes":
			for idx, __instance__ := range any(instance).(Node).Nodes {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case Paragraph:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Paragraph).Name
		case "Node":
			if any(instance).(Paragraph).Node != nil {
				res = any(instance).(Paragraph).Node.Name
			}
		}
	case Rune:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Rune).Name
		case "Node":
			if any(instance).(Rune).Node != nil {
				res = any(instance).(Rune).Node.Name
			}
		}
	case Text:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Text).Name
		case "Content":
			res = any(instance).(Text).Content
		case "Node":
			if any(instance).(Text).Node != nil {
				res = any(instance).(Text).Node.Name
			}
		}
	}
	return
}

// Last line of the template
