// generated by ModelGongFileTemplate
package models

import (
	"errors"
	"fmt"
	"sync"
)

// errUnkownEnum is returns when a value cannot match enum values
var errUnkownEnum = errors.New("unkown enum")

// needed to avoid when fmt package is not needed by generated code
var __dummy__fmt_variable fmt.Scanner

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Docxs           map[*Docx]any
	Docxs_mapString map[string]*Docx

	OnAfterDocxCreateCallback OnAfterCreateInterface[Docx]
	OnAfterDocxUpdateCallback OnAfterUpdateInterface[Docx]
	OnAfterDocxDeleteCallback OnAfterDeleteInterface[Docx]
	OnAfterDocxReadCallback   OnAfterReadInterface[Docx]

	Files           map[*File]any
	Files_mapString map[string]*File

	OnAfterFileCreateCallback OnAfterCreateInterface[File]
	OnAfterFileUpdateCallback OnAfterUpdateInterface[File]
	OnAfterFileDeleteCallback OnAfterDeleteInterface[File]
	OnAfterFileReadCallback   OnAfterReadInterface[File]

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int

	// store meta package import
	MetaPackageImportPath  string
	MetaPackageImportAlias string

	// to be removed after fix of [issue](https://github.com/golang/go/issues/57559)
	// map to enable docLink renaming when an identifier is renamed
	Map_DocLink_Renaming map[string]GONG__Identifier
	// the to be removed stops here
}

type GONG__Identifier struct {
	Ident string
	Type  GONG__ExpressionType
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

// OnAfterCreateInterface callback when an instance is updated from the front
type OnAfterCreateInterface[Type Gongstruct] interface {
	OnAfterCreate(stage *StageStruct,
		instance *Type)
}

// OnAfterReadInterface callback when an instance is updated from the front
type OnAfterReadInterface[Type Gongstruct] interface {
	OnAfterRead(stage *StageStruct,
		instance *Type)
}

// OnAfterUpdateInterface callback when an instance is updated from the front
type OnAfterUpdateInterface[Type Gongstruct] interface {
	OnAfterUpdate(stage *StageStruct, old, new *Type)
}

// OnAfterDeleteInterface callback when an instance is updated from the front
type OnAfterDeleteInterface[Type Gongstruct] interface {
	OnAfterDelete(stage *StageStruct,
		staged, front *Type)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitDocx(docx *Docx)
	CheckoutDocx(docx *Docx)
	CommitFile(file *File)
	CheckoutFile(file *File)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

var _stage *StageStruct

var once sync.Once

func GetDefaultStage() *StageStruct {
	once.Do(func() {
		_stage = NewStage()
	})
	return _stage
}

func NewStage() (stage *StageStruct) {

	stage = &StageStruct{ // insertion point for array initiatialisation
		Docxs:           make(map[*Docx]any),
		Docxs_mapString: make(map[string]*Docx),

		Files:           make(map[*File]any),
		Files_mapString: make(map[string]*File),

		// end of insertion point
		Map_GongStructName_InstancesNb: make(map[string]int),

		// to be removed after fix of [issue](https://github.com/golang/go/issues/57559)
		Map_DocLink_Renaming: make(map[string]GONG__Identifier),
		// the to be removed stops here
	}

	return
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Docx"] = len(stage.Docxs)
	stage.Map_GongStructName_InstancesNb["File"] = len(stage.Files)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Docx"] = len(stage.Docxs)
	stage.Map_GongStructName_InstancesNb["File"] = len(stage.Files)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts docx to the model stage
func (docx *Docx) Stage(stage *StageStruct) *Docx {
	stage.Docxs[docx] = __member
	stage.Docxs_mapString[docx.Name] = docx

	return docx
}

// Unstage removes docx off the model stage
func (docx *Docx) Unstage(stage *StageStruct) *Docx {
	delete(stage.Docxs, docx)
	delete(stage.Docxs_mapString, docx.Name)
	return docx
}

// commit docx to the back repo (if it is already staged)
func (docx *Docx) Commit(stage *StageStruct) *Docx {
	if _, ok := stage.Docxs[docx]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitDocx(docx)
		}
	}
	return docx
}

// Checkout docx to the back repo (if it is already staged)
func (docx *Docx) Checkout(stage *StageStruct) *Docx {
	if _, ok := stage.Docxs[docx]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutDocx(docx)
		}
	}
	return docx
}

// for satisfaction of GongStruct interface
func (docx *Docx) GetName() (res string) {
	return docx.Name
}

// Stage puts file to the model stage
func (file *File) Stage(stage *StageStruct) *File {
	stage.Files[file] = __member
	stage.Files_mapString[file.Name] = file

	return file
}

// Unstage removes file off the model stage
func (file *File) Unstage(stage *StageStruct) *File {
	delete(stage.Files, file)
	delete(stage.Files_mapString, file.Name)
	return file
}

// commit file to the back repo (if it is already staged)
func (file *File) Commit(stage *StageStruct) *File {
	if _, ok := stage.Files[file]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitFile(file)
		}
	}
	return file
}

// Checkout file to the back repo (if it is already staged)
func (file *File) Checkout(stage *StageStruct) *File {
	if _, ok := stage.Files[file]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutFile(file)
		}
	}
	return file
}

// for satisfaction of GongStruct interface
func (file *File) GetName() (res string) {
	return file.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMDocx(Docx *Docx)
	CreateORMFile(File *File)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMDocx(Docx *Docx)
	DeleteORMFile(File *File)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Docxs = make(map[*Docx]any)
	stage.Docxs_mapString = make(map[string]*Docx)

	stage.Files = make(map[*File]any)
	stage.Files_mapString = make(map[string]*File)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Docxs = nil
	stage.Docxs_mapString = nil

	stage.Files = nil
	stage.Files_mapString = nil

}

func (stage *StageStruct) Unstage() { // insertion point for array nil
	for docx := range stage.Docxs {
		docx.Unstage(stage)
	}

	for file := range stage.Files {
		file.Unstage(stage)
	}

}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	Docx | File
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*Docx | *File
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*Docx]any |
		map[*File]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*Docx |
		map[string]*File |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet](stage *StageStruct) *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*Docx]any:
		return any(&stage.Docxs).(*Type)
	case map[*File]any:
		return any(&stage.Files).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString](stage *StageStruct) *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*Docx:
		return any(&stage.Docxs_mapString).(*Type)
	case map[string]*File:
		return any(&stage.Files_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct](stage *StageStruct) *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Docx:
		return any(&stage.Docxs).(*map[*Type]any)
	case File:
		return any(&stage.Files).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct](stage *StageStruct) *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Docx:
		return any(&stage.Docxs_mapString).(*map[string]*Type)
	case File:
		return any(&stage.Files_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case Docx:
		return any(&Docx{
			// Initialisation of associations
			// field is initialized with an instance of File with the name of the field
			Files: []*File{{Name: "Files"}},
		}).(*Type)
	case File:
		return any(&File{
			// Initialisation of associations
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string, stage *StageStruct) map[*End][]*Start {

	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Docx
	case Docx:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of File
	case File:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string, stage *StageStruct) map[*End]*Start {

	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Docx
	case Docx:
		switch fieldname {
		// insertion point for per direct association field
		case "Files":
			res := make(map[*File]*Docx)
			for docx := range stage.Docxs {
				for _, file_ := range docx.Files {
					res[file_] = docx
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of File
	case File:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Docx:
		res = "Docx"
	case File:
		res = "File"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Docx:
		res = []string{"Name", "Files"}
	case File:
		res = []string{"Name"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case Docx:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Docx).Name
		case "Files":
			for idx, __instance__ := range any(instance).(Docx).Files {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case File:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(File).Name
		}
	}
	return
}

// Last line of the template
